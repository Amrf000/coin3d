#  This can be any file in the package.
AC_INIT(src/misc/SoDB.cpp)

#  Used for the SoCalculator expression parser.
# AC_PROG_LEX
# AC_PROG_YACC
# FIXME: tmp disabled -- I'm not sure how fond Automake is of the
# mixing and matching of lex and yacc sources, and the pre-generated
# C-files. 20000416 mortene.


#  Locate C++ compiler and set C++ as the default language to use
#  in tests. The configure script will automatically terminate if
#  it doesn't find a C++ compiler.
AC_PROG_CXX
AC_LANG_CPLUSPLUS

SIM_COMPILER_INLINE_FOR(, AC_MSG_ERROR(the \"$CXX\" C++ compiler is not capable of compiling Coin))
SIM_AC_CHECK_VAR_FUNCTIONNAME


# *******************************************************************
# * Library version control.
# *******************************************************************

#  Making releases:
#    COIN_MICRO_VERSION += 1;
#    COIN_INTERFACE_AGE += 1;
#    COIN_BINARY_AGE += 1;
#  if any functions have been added, set COIN_INTERFACE_AGE to 0.
#  if backwards compatibility has been broken,
#  set COIN_BINARY_AGE _and_ COIN_INTERFACE_AGE to 0.
# 
COIN_MAJOR_VERSION=0
COIN_MINOR_VERSION=6
COIN_MICRO_VERSION=0
COIN_INTERFACE_AGE=0
COIN_BINARY_AGE=0
COIN_VERSION=$COIN_MAJOR_VERSION.$COIN_MINOR_VERSION.$COIN_MICRO_VERSION

AC_SUBST(COIN_MAJOR_VERSION)
AC_SUBST(COIN_MINOR_VERSION)
AC_SUBST(COIN_MICRO_VERSION)
AC_SUBST(COIN_VERSION)
AC_SUBST(COIN_INTERFACE_AGE)
AC_SUBST(COIN_BINARY_AGE)

#  libtool versioning
LT_RELEASE=$COIN_MAJOR_VERSION.$COIN_MINOR_VERSION
LT_CURRENT=`expr $COIN_MICRO_VERSION - $COIN_INTERFACE_AGE`
LT_REVISION=$COIN_INTERFACE_AGE
LT_AGE=`expr $COIN_BINARY_AGE - $COIN_INTERFACE_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

VERSION=$COIN_VERSION

#  These are for include/Inventor/SbBasic.h.

AC_DEFINE_UNQUOTED(COIN_MAJOR_VERSION, $COIN_MAJOR_VERSION)
AC_DEFINE_UNQUOTED(COIN_MINOR_VERSION, $COIN_MINOR_VERSION)
AC_DEFINE_UNQUOTED(COIN_MICRO_VERSION, $COIN_MICRO_VERSION)
AC_DEFINE_UNQUOTED(COIN_VERSION, "$COIN_VERSION")

# *******************************************************************
# * Miscellaneous options and initializations.
# *******************************************************************

AM_INIT_AUTOMAKE(libCoin, $VERSION)

#  Files to cram results from the configure tests into.
AM_CONFIG_HEADER(config.h include/Inventor/SbBasic.h)

#  Default to not building a static library.
#  Can be overridden by the user with --enable-static.
AM_DISABLE_STATIC

#  Turn off default maintainer make-rules -- use ./autogen.sh instead.
AM_MAINTAINER_MODE

#  Initialize libtool
AC_PROG_LIBTOOL


#  These are used for constructing the coin-config file.
COIN_EXTRA_CPPFLAGS=$CPPFLAGS
COIN_EXTRA_LDFLAGS=$LDFLAGS
COIN_EXTRA_LIBS=$LIBS
AC_SUBST(COIN_EXTRA_CPPFLAGS)
AC_SUBST(COIN_EXTRA_LDFLAGS)
AC_SUBST(COIN_EXTRA_LIBS)


# Check if linking should be done MSWin-style ("libname.lib") or
# Unix-style ("-llibname").
SIM_AC_CHECK_LINKSTYLE

if test x"$sim_ac_linking_style" = xmswin; then
  COIN_LIBNAME=coin.lib
  # wsock32.lib is needed on MSWin for the ntohs() and ntohl() calls used
  # in SoInput.cpp. FIXME: we should probably avoid using those calls
  # (they don't seem very "64bit-clean", for instance). 20000609 mortene.
  LIBS="wsock32.lib $LIBS"
  COIN_EXTRA_LIBS="wsock32.lib $COIN_EXTRA_LIBS"
else
  COIN_LIBNAME=-lCoin
fi
AC_SUBST(COIN_LIBNAME)


# *******************************************************************
# * Check compiler features, bugs, etc.
# *******************************************************************

SIM_COMPILE_DEBUG(CXXFLAGS="$CXXFLAGS -DCOIN_DEBUG=1", CXXFLAGS="$CXXFLAGS -DCOIN_DEBUG=0")

SIM_DEBUGSYMBOLS
SIM_AC_RTTI_SUPPORT
SIM_EXCEPTION_HANDLING
SIM_PROFILING_SUPPORT
SIM_COMPILER_WARNINGS

#  Yep, this is important in case we want to add code to make
#  the API interface "Open Inventor strict", meaning the user must
#  use the exact same include files as under "real" Open Inventor.
#  We would then need to know that we are actually allowed to include
#  any file during internal build.
CPPFLAGS="$CPPFLAGS -DCOIN_INTERNAL"


AC_CHECK_HEADERS(unistd.h io.h)
SIM_CHECK_NPRINTF

SIM_AC_CHECK_MACRO_QUOTE( , AC_MSG_ERROR(couldn't figure out how to quote strings in macros))
if test x"$sim_ac_quote_hash" = xyes; then
  AC_DEFINE(HAVE_HASH_QUOTING)
else
  if test x"$sim_ac_quote_apostrophes" = xyes; then
    AC_DEFINE(HAVE_APOSTROPHES_QUOTING)
  fi
fi


# *******************************************************************
# * Set us up for using the simage library (if wanted, and if
# * available).
# *******************************************************************

SIM_AC_CHECK_SIMAGE([AC_DEFINE(HAVE_LIBSIMAGE)
                    COIN_EXTRA_CPPFLAGS="$COIN_EXTRA_CPPFLAGS $sim_ac_simage_cppflags"
                    COIN_EXTRA_LDFLAGS="$COIN_EXTRA_LDFLAGS $sim_ac_simage_ldflags"
                    COIN_EXTRA_LIBS="$sim_ac_simage_libs $COIN_EXTRA_LIBS"],
                    AC_MSG_WARN(simage development system not found),
                    [default searchprefix])


# We need to check for the math library on our own if its not
# "inherited" from the simage library. FIXME: this could better
# be done with a "SIM_AC_MATHLIB_READY" test, in the same vein
# as the X11 "readiness-test" in SoXt configure.in. 20000609 mortene.

if test x"$sim_ac_simage_avail" = xno; then
  SIM_AC_CHECK_MATHLIB(COIN_EXTRA_LIBS="$COIN_EXTRA_LIBS $sim_ac_libm",
                       AC_MSG_ERROR(could not find a way to use math library))
fi

AC_CACHE_CHECK([whether single-precision math functions are available],
  sim_cv_func_singleprec_avail,
  [AC_TRY_LINK([#include <math.h>],
               [(void)sqrtf(1.0f);
                (void)powf(1.0f, 1.0f);
                (void)cosf(1.0f);
                (void)sinf(1.0f);
                (void)tanf(1.0f);
                (void)acosf(1.0f);
                (void)asinf(1.0f);
                (void)atanf(1.0f);
                (void)atan2f(1.0f, 1.0f);],
               sim_cv_func_singleprec_avail=true,
               sim_cv_func_singleprec_avail=false)])

$sim_cv_func_singleprec_avail && AC_DEFINE(HAVE_SINGLEPRECISION_MATH)


# *******************************************************************
# * Handle the detection and inclusion of X11 libraries.
# *******************************************************************

SIM_CHECK_X11([COIN_EXTRA_CPPFLAGS="$COIN_EXTRA_CPPFLAGS $sim_ac_x11_cppflags"
               COIN_EXTRA_LDFLAGS="$COIN_EXTRA_LDFLAGS $sim_ac_x11_ldflags"
               COIN_EXTRA_LIBS="$sim_ac_x11_libs $COIN_EXTRA_LIBS"])

if test x"$sim_ac_x11_avail" = xyes; then
  #  If the X11 shared memory extension is available, include it as
  #  the Mesa library has probably been linked against it.
  SIM_CHECK_X11SHMEM(COIN_EXTRA_LIBS="$sim_ac_x11shmem_libs $COIN_EXTRA_LIBS")
fi


# *******************************************************************
# * Test for installation of Mesa or OpenGL development system.
# *******************************************************************

SIM_AC_CHECK_OPENGL([AC_DEFINE(HAVE_OPENGL)
                    COIN_EXTRA_CPPFLAGS="$COIN_EXTRA_CPPFLAGS $sim_ac_gl_cppflags"
                    COIN_EXTRA_LDFLAGS="$COIN_EXTRA_LDFLAGS $sim_ac_gl_ldflags"
                    COIN_EXTRA_LIBS="$sim_ac_gl_libs $COIN_EXTRA_LIBS"],
                    AC_MSG_ERROR(needs an OpenGL-compatible development system installation to compile Coin))

# FIXME: should be able to handle systems where OpenGL is not available,
# as it would be handy for making e.g. import/export-only versions of the
# library. 20000123 mortene.

# *******************************************************************
# ** Check if the Mesa offscreen rendering interface is available.
# *******************************************************************

AC_CACHE_CHECK([whether Mesa offscreen rendering is available],
  sim_cv_func_osmesacreatecontext_avail,
  [AC_TRY_LINK([#include <GL/osmesa.h>],
               [(void)OSMesaCreateContext(OSMESA_RGB, 0L);],
               sim_cv_func_osmesacreatecontext_avail=yes,
               sim_cv_func_osmesacreatecontext_avail=no)])

if test x"$sim_cv_func_osmesacreatecontext_avail" = xyes; then
  AC_DEFINE(HAVE_OSMESACREATECONTEXT)

  AC_CACHE_CHECK([whether Mesa pixelstore format should be set],
    sim_cv_func_osmesapixelstore_avail,
    [AC_TRY_LINK([#include <GL/osmesa.h>],
                 [OSMesaPixelStore(OSMESA_Y_UP, 0);],
                 sim_cv_func_osmesapixelstore_avail=yes,
                 sim_cv_func_osmesapixelstore_avail=no)])

  if test x"$sim_cv_func_osmesapixelstore_avail" = xyes; then
    AC_DEFINE(HAVE_OSMESAPIXELSTORE)
  fi
fi


# *******************************************************************
# ** Check if GLX is available.
# *******************************************************************

AC_CACHE_CHECK([whether GLX is available],
  sim_cv_func_glx_avail,
  [AC_TRY_LINK([#include <GL/glx.h>],
               [(void)glXChooseVisual(0L, 0, 0L);],
               sim_cv_func_glx_avail=yes,
               sim_cv_func_glx_avail=no)])

if test x"$sim_cv_func_glx_avail" = xyes; then
  AC_DEFINE(HAVE_GLX)
fi


# *******************************************************************
# * Provide this nasty hack to help building Coin on platforms
# * where one can bump into the "Arg list too long" problem
# * (IBM AIX, SGI IRIX 6.2 and IRIX 6.5 with standard settings are
# * known to fail).
# *******************************************************************

AC_ARG_ENABLE(compact,
  AC_HELP_STRING([--enable-compact], [enable hack for compact compilation [default=no]]),
  [case "${enableval}" in
    yes) enable_compact=yes ;;
    no)  enable_compact=no ;;
    *) AC_MSG_ERROR(bad value \"${enableval}\" for --enable-compact) ;;
  esac],
  enable_compact=no)

AM_CONDITIONAL(HACKING_COMPACT_BUILD, test x"$enable_compact" = x"yes")



# *******************************************************************
# * Enable/disable compilation with the "incremental linking through
# * the use of dynamic libraries"-hack.
# *******************************************************************

AC_ARG_ENABLE(hacking,
  AC_HELP_STRING([--enable-hacking], [enable hacks for quick turn-around cycles during development [default=no]]),
  [case "${enableval}" in
    yes) enable_hacking=yes ;;
    no)  enable_hacking=no ;;
    *) AC_MSG_ERROR(bad value \"${enableval}\" for --enable-hacking) ;;
  esac],
  enable_hacking=no)

AM_CONDITIONAL(HACKING_DYNAMIC_MODULES, test x"$enable_hacking" = x"yes")

COIN_HACKING_LIBDIRS=
if test x"$enable_hacking" = x"yes"; then
  coin_build_dir=`pwd`
  COIN_HACKING_LIBDIRS="-L${coin_build_dir}/src/base/.libs -L${coin_build_dir}/src/VRMLnodes/.libs -L${coin_build_dir}/src/actions/.libs -L${coin_build_dir}/src/bundles/.libs -L${coin_build_dir}/src/caches/.libs -L${coin_build_dir}/src/details/.libs -L${coin_build_dir}/src/draggers/.libs -L${coin_build_dir}/src/elements/.libs -L${coin_build_dir}/src/engines/.libs -L${coin_build_dir}/src/errors/.libs -L${coin_build_dir}/src/events/.libs -L${coin_build_dir}/src/fields/.libs -L${coin_build_dir}/src/manips/.libs -L${coin_build_dir}/src/misc/.libs -L${coin_build_dir}/src/lists/.libs -L${coin_build_dir}/src/nodekits/.libs -L${coin_build_dir}/src/nodes/.libs -L${coin_build_dir}/src/projectors/.libs -L${coin_build_dir}/src/sensors/.libs"
  COIN_EXTRA_LIBS="-lbaseLINKHACK -lVRMLnodesLINKHACK -lactionsLINKHACK -lbundlesLINKHACK -lcachesLINKHACK -ldetailsLINKHACK -ldraggersLINKHACK -lelementsLINKHACK -lenginesLINKHACK -lerrorsLINKHACK -leventsLINKHACK -lfieldsLINKHACK -lmanipsLINKHACK -lmiscLINKHACK -llistsLINKHACK -lnodekitsLINKHACK -lnodesLINKHACK -lprojectorsLINKHACK -lsensorsLINKHACK $COIN_EXTRA_LIBS"
fi

AC_SUBST(COIN_HACKING_LIBDIRS)


# *******************************************************************
# * Do we want libtool to use some other depmode? (makedep, cpp, etc)
# * 
# * By default, dependencies are not made for Solaris, for example...
# *******************************************************************

AC_ARG_WITH(depmode,
  AC_HELP_STRING([--with-depmode=MODE], [override dependency mode setting]),
  CCDEPMODE="depmode=${withval}" CXXDEPMODE="depmode=${withval}")

# FIXME: should do a check for whether or not the compilers can
# actually use the given depmode. 20000525 mortene.

# *******************************************************************
# * Do we want to build the tools?
# *******************************************************************

AC_ARG_WITH(tools,
  AC_HELP_STRING([--with-tools], [build Coin-based tools [default=yes]]),
  [case "${withval}" in
    yes) want_tools=yes ;;
    no)  want_tools=no ;;
    *) AC_MSG_ERROR(bad value \"${withval}\" for --with-tools) ;;
  esac],
  [want_tools=yes])

AM_CONDITIONAL(BUILD_TOOLS, test x"$want_tools" = xyes)


# *******************************************************************
# * Do we want to build the example programs?
# *******************************************************************

AC_ARG_WITH(examples,
  AC_HELP_STRING([--with-examples], [build Coin example programs [default=yes]]),
  [case "${withval}" in
    yes) want_examples=yes ;;
    no)  want_examples=no ;;
    *) AC_MSG_ERROR(bad value \"${withval}\" for --with-examples) ;;
  esac],
  [want_examples=yes])

AM_CONDITIONAL(BUILD_EXAMPLES, test x"$want_examples" = xyes)


# *******************************************************************
# * List all files configure shall generate.
# *******************************************************************

SIM_EXPAND_DIR_VARS

# Set coin_build_dir so we can change coin.dsp
coin_current_dir=`pwd`
SIM_AC_DOBACKSLASH(coin_build_dir,$coin_current_dir)
AC_SUBST(coin_build_dir)

# Set coin_src_dir so we can change coin.dsp
SIM_AC_DOBACKSLASH(coin_src_dir,$srcdir)
AC_SUBST(coin_src_dir)

AC_OUTPUT([
        coin-config
        Makefile
        include/Makefile
        include/Inventor/Makefile
        include/Inventor/lock/Makefile
        data/Makefile
        data/draggerDefaults/Makefile
        src/Makefile
        src/base/Makefile
        src/VRMLnodes/Makefile
        src/actions/Makefile
        src/bundles/Makefile
        src/caches/Makefile
        src/details/Makefile
        src/draggers/Makefile
        src/elements/Makefile
        src/engines/Makefile
        src/errors/Makefile
        src/events/Makefile
        src/fields/Makefile
        src/manips/Makefile
        src/misc/Makefile
        src/lists/Makefile
        src/nodekits/Makefile
        src/nodes/Makefile
        src/projectors/Makefile
        src/sensors/Makefile
        src/system/Makefile
        tools/Makefile
        tools/ivcat/Makefile
        tools/ivhierarchy/Makefile
        tools/ivNodeKitStructure/Makefile
        tools/renderos/Makefile
        examples/Makefile
        examples/advanced/Makefile
        examples/advanced/elements/Makefile
        build/coin.dsp
        build/coin.mak
        ],
        [chmod a+x coin-config])

# echo "" | tr -d "
"

# *******************************************************************
# * Platform-specific stuff.
# *******************************************************************

ac_coin_unknown_platform=yes

case "$host_os" in
  irix6.2)
    if test "$CXX" = CC; then ac_coin_unknown_platform=no; fi
    ;;
  aix*)
    if test "$CXX" = xlC; then ac_coin_unknown_platform=no; fi
    ;;
  hpux10.20)
    if test "$CXX" = aCC; then ac_coin_unknown_platform=no; fi
    ;;
  linux-gnu)
    case "$host_cpu" in
      i?86)
        ac_coin_unknown_platform=no ;;
    esac
    ;;
  beos)
    case "$host_cpu" in
      i?86)
        if test "$CXX" = c++; then ac_coin_unknown_platform=no; fi
        ;;
    esac
    ;;
esac

if test $ac_coin_unknown_platform = yes; then
  echo
  echo "************************* WARNING ****************************"
  echo "*"
  echo "* We have not tested Coin on the $host_os $host_cpu"
  echo "* platform with the $CXX C++ compiler. Please report"
  echo "* back to us at <coin-support@sim.no> how it works out."
  echo "*"
  echo "**************************************************************"
  echo
fi


case "$host_os" in
  irix*)
    echo ""
    echo " Detected SGI IRIX. There are some hints regarding this platform"
    echo " in the file "
    echo ""
    echo "           ${srcdir}/README.IRIX"
    echo ""
    echo " Please take a look if this is your first time building on IRIX."
    echo ;;

  aix*)
    echo ""
    echo " Detected IBM AIX. There are some hints regarding this platform"
    echo " in the file "
    echo ""
    echo "           ${srcdir}/README.AIX"
    echo ""
    echo " Please take a look if this is your first time building on AIX."
    echo ;;
esac

if test x"$sim_ac_linking_style" = xmswin; then
    echo ""
    echo " Detected MSVC++. There are some hints regarding this compiler"
    echo " in the file "
    echo ""
    echo "           ${srcdir}/README.MSVC"
    echo ""
    echo " Please take a look if this is your first time building with"
    echo " MSVC++."
    echo
fi

# *******************************************************************
# * Made it!
# *******************************************************************

echo
echo "Now, run 'make install' to build and install Coin."
