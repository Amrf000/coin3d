dnl  This can be any file in the package.
AC_INIT(src/misc/SoDB.cpp)

dnl  Used for the SoCalculator expression parser.
dnl AC_PROG_LEX
dnl AC_PROG_YACC
dnl FIXME: tmp disabled -- I'm not sure how fond Automake is of the
dnl mixing and matching of lex and yacc sources, and the pre-generated
dnl C-files. 20000416 mortene.


dnl  Locate C++ compiler and set C++ as the default language to use
dnl  in tests. The configure script will automatically terminate if
dnl  it doesn't find a C++ compiler.
AC_PROG_CXX
AC_LANG_CPLUSPLUS

SIM_COMPILER_INLINE_FOR(, AC_MSG_ERROR(the \"$CXX\" C++ compiler is not capable of compiling Coin))
SIM_AC_CHECK_VAR_FUNCTIONNAME


dnl *******************************************************************
dnl * Library version control.
dnl *******************************************************************

dnl  Making releases:
dnl    COIN_MICRO_VERSION += 1;
dnl    COIN_INTERFACE_AGE += 1;
dnl    COIN_BINARY_AGE += 1;
dnl  if any functions have been added, set COIN_INTERFACE_AGE to 0.
dnl  if backwards compatibility has been broken,
dnl  set COIN_BINARY_AGE _and_ COIN_INTERFACE_AGE to 0.
dnl 
COIN_MAJOR_VERSION=0
COIN_MINOR_VERSION=6
COIN_MICRO_VERSION=0
COIN_INTERFACE_AGE=0
COIN_BINARY_AGE=0
COIN_VERSION=$COIN_MAJOR_VERSION.$COIN_MINOR_VERSION.$COIN_MICRO_VERSION

AC_SUBST(COIN_MAJOR_VERSION)
AC_SUBST(COIN_MINOR_VERSION)
AC_SUBST(COIN_MICRO_VERSION)
AC_SUBST(COIN_VERSION)
AC_SUBST(COIN_INTERFACE_AGE)
AC_SUBST(COIN_BINARY_AGE)

dnl  libtool versioning
LT_RELEASE=$COIN_MAJOR_VERSION.$COIN_MINOR_VERSION
LT_CURRENT=`expr $COIN_MICRO_VERSION - $COIN_INTERFACE_AGE`
LT_REVISION=$COIN_INTERFACE_AGE
LT_AGE=`expr $COIN_BINARY_AGE - $COIN_INTERFACE_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

VERSION=$COIN_VERSION

dnl  These are for include/Inventor/SbBasic.h.

AC_DEFINE_UNQUOTED(COIN_MAJOR_VERSION, $COIN_MAJOR_VERSION)
AC_DEFINE_UNQUOTED(COIN_MINOR_VERSION, $COIN_MINOR_VERSION)
AC_DEFINE_UNQUOTED(COIN_MICRO_VERSION, $COIN_MICRO_VERSION)
AC_DEFINE_UNQUOTED(COIN_VERSION, "$COIN_VERSION")

dnl *******************************************************************
dnl * Miscellaneous options and initializations.
dnl *******************************************************************

AM_INIT_AUTOMAKE(libCoin, $VERSION)

dnl  Files to cram results from the configure tests into.
AM_CONFIG_HEADER(config.h include/Inventor/SbBasic.h)

dnl  Default to not building a static library.
dnl  Can be overridden by the user with --enable-static.
AM_DISABLE_STATIC

dnl  Turn off default maintainer make-rules -- use ./autogen.sh instead.
AM_MAINTAINER_MODE

dnl  Initialize libtool
AC_PROG_LIBTOOL


dnl  These are used for constructing the coin-config file.
COIN_EXTRA_CPPFLAGS=
COIN_EXTRA_LDFLAGS=
COIN_EXTRA_LIBS=
AC_SUBST(COIN_EXTRA_CPPFLAGS)
AC_SUBST(COIN_EXTRA_LDFLAGS)
AC_SUBST(COIN_EXTRA_LIBS)


# Check if linking should be done MSWin-style ("libname.lib") or
# Unix-style ("-llibname").
SIM_AC_CHECK_LINKSTYLE

if test x"$sim_ac_linking_style" = xmswin; then
  COIN_LIBNAME=coin.lib
else
  COIN_LIBNAME=-lCoin
fi
AC_SUBST(COIN_LIBNAME)


dnl *******************************************************************
dnl * Check compiler features, bugs, etc.
dnl *******************************************************************

SIM_AC_CHECK_MACRO_QUOTE( , AC_MSG_ERROR(couldn't figure out how to quote strings in macros))
if test x"$sim_ac_quote_hash" = xyes; then
  AC_DEFINE(HAVE_HASH_QUOTING)
else
  if test x"$sim_ac_quote_apostrophes" = xyes; then
    AC_DEFINE(HAVE_APOSTROPHES_QUOTING)
  fi
fi



dnl *******************************************************************
dnl * Set us up for using the simage library (if wanted, and if
dnl * available).
dnl *******************************************************************

SIM_AC_CHECK_SIMAGE([AC_DEFINE(HAVE_LIBSIMAGE)
                    COIN_EXTRA_CPPFLAGS="$COIN_EXTRA_CPPFLAGS $sim_ac_simage_cppflags"
                    COIN_EXTRA_LDFLAGS="$COIN_EXTRA_LDFLAGS $sim_ac_simage_ldflags"
                    COIN_EXTRA_LIBS="$sim_ac_simage_libs $COIN_EXTRA_LIBS"],
                    AC_MSG_WARN(simage development system not found),
                    [default searchprefix])

dnl  We need to check for the math library on our own if its not
dnl  "inherited" from the simage library.
if test x"$sim_ac_simage_avail" = xno; then
  AC_CHECK_LIBM
  LIBS="$LIBM $LIBS"
  COIN_EXTRA_LIBS="$LIBM $COIN_EXTRA_LIBS"
fi


dnl *******************************************************************
dnl * Handle the detection and inclusion of X11 libraries.
dnl *******************************************************************

SIM_CHECK_X11([COIN_EXTRA_CPPFLAGS="$COIN_EXTRA_CPPFLAGS $sim_ac_x11_cppflags"
               COIN_EXTRA_LDFLAGS="$COIN_EXTRA_LDFLAGS $sim_ac_x11_ldflags"
               COIN_EXTRA_LIBS="$sim_ac_x11_libs $COIN_EXTRA_LIBS"])

if test x"$sim_ac_x11_avail" = xyes; then
  dnl  If the X11 shared memory extension is available, include it as
  dnl  the Mesa library has probably been linked against it.
  SIM_CHECK_X11SHMEM(COIN_EXTRA_LIBS="$sim_ac_x11shmem_libs $COIN_EXTRA_LIBS")
fi


dnl *******************************************************************
dnl * Test for installation of Mesa or OpenGL development system.
dnl *******************************************************************

SIM_AC_CHECK_OPENGL([AC_DEFINE(HAVE_OPENGL)
                    COIN_EXTRA_CPPFLAGS="$COIN_EXTRA_CPPFLAGS $sim_ac_gl_cppflags"
                    COIN_EXTRA_LDFLAGS="$COIN_EXTRA_LDFLAGS $sim_ac_gl_ldflags"
                    COIN_EXTRA_LIBS="$sim_ac_gl_libs $COIN_EXTRA_LIBS"],
                    AC_MSG_ERROR(needs an OpenGL-compatible development system installation to compile Coin))

# FIXME: should be able to handle systems where OpenGL is not available,
# as it would be handy for making e.g. import/export-only versions of the
# library. 20000123 mortene.

dnl *******************************************************************
dnl ** Check if the Mesa offscreen rendering interface is available.
dnl *******************************************************************

AC_CACHE_CHECK([whether Mesa offscreen rendering is available],
  sim_cv_func_osmesacreatecontext_avail,
  [AC_TRY_LINK([#include <GL/osmesa.h>],
               [(void)OSMesaCreateContext(OSMESA_RGB, 0L);],
               sim_cv_func_osmesacreatecontext_avail=yes,
               sim_cv_func_osmesacreatecontext_avail=no)])

if test x"$sim_cv_func_osmesacreatecontext_avail" = xyes; then
  AC_DEFINE(HAVE_OSMESACREATECONTEXT)

  AC_CACHE_CHECK([whether Mesa pixelstore format should be set],
    sim_cv_func_osmesapixelstore_avail,
    [AC_TRY_LINK([#include <GL/osmesa.h>],
                 [OSMesaPixelStore(OSMESA_Y_UP, 0);],
                 sim_cv_func_osmesapixelstore_avail=yes,
                 sim_cv_func_osmesapixelstore_avail=no)])

  if test x"$sim_cv_func_osmesapixelstore_avail" = xyes; then
    AC_DEFINE(HAVE_OSMESAPIXELSTORE)
  fi
fi


dnl *******************************************************************
dnl ** Check if GLX is available.
dnl *******************************************************************

AC_CACHE_CHECK([whether GLX is available],
  sim_cv_func_glx_avail,
  [AC_TRY_LINK([#include <GL/glx.h>],
               [(void)glXChooseVisual(0L, 0, 0L);],
               sim_cv_func_glx_avail=yes,
               sim_cv_func_glx_avail=no)])

if test x"$sim_cv_func_glx_avail" = xyes; then
  AC_DEFINE(HAVE_GLX)
fi


dnl *******************************************************************
dnl * Compiler control.
dnl *******************************************************************

SIM_COMPILE_DEBUG(CXXFLAGS="$CXXFLAGS -DCOIN_DEBUG=1", CXXFLAGS="$CXXFLAGS -DCOIN_DEBUG=0")

SIM_DEBUGSYMBOLS
SIM_AC_RTTI_SUPPORT
SIM_EXCEPTION_HANDLING
SIM_PROFILING_SUPPORT
SIM_COMPILER_WARNINGS

dnl  Yep, this is important in case we want to add code to make
dnl  the API interface "Open Inventor strict", meaning the user must
dnl  use the exact same include files as under "real" Open Inventor.
dnl  We would then need to know that we are actually allowed to include
dnl  any file during internal build.
CPPFLAGS="$CPPFLAGS -DCOIN_INTERNAL"


AC_CHECK_HEADERS(unistd.h io.h)
SIM_CHECK_NPRINTF
dnl **obsoleted**  AC_CHECK_FUNCS(vsnprintf _vsnprintf snprintf _snprintf)


dnl *******************************************************************
dnl * Provide this nasty hack to help building Coin on platforms
dnl * where one can bump into the "Arg list too long" problem
dnl * (both AIX and IRIX 6.2 with standard settings are known to fail).
dnl *******************************************************************

AC_ARG_ENABLE(compact,
  AC_HELP_STRING([--enable-compact], [enable hack for compact compilation [default=no]]),
  [case "${enableval}" in
    yes) enable_compact=yes ;;
    no)  enable_compact=no ;;
    *) AC_MSG_ERROR(bad value \"${enableval}\" for --enable-compact) ;;
  esac],
  enable_compact=no)

AM_CONDITIONAL(HACKING_COMPACT_BUILD, test x"$enable_compact" = x"yes")



dnl *******************************************************************
dnl * Enable/disable compilation with the "incremental linking through
dnl * the use of dynamic libraries"-hack.
dnl *******************************************************************

AC_ARG_ENABLE(hacking,
  AC_HELP_STRING([--enable-hacking], [enable hacks for quick turn-around cycles during development [default=no]]),
  [case "${enableval}" in
    yes) enable_hacking=yes ;;
    no)  enable_hacking=no ;;
    *) AC_MSG_ERROR(bad value \"${enableval}\" for --enable-hacking) ;;
  esac],
  enable_hacking=no)

AM_CONDITIONAL(HACKING_DYNAMIC_MODULES, test x"$enable_hacking" = x"yes")

COIN_HACKING_LIBDIRS=
if test x"$enable_hacking" = x"yes"; then
  coin_build_dir=`pwd`
  COIN_HACKING_LIBDIRS="-L${coin_build_dir}/src/base/.libs -L${coin_build_dir}/src/VRMLnodes/.libs -L${coin_build_dir}/src/actions/.libs -L${coin_build_dir}/src/bundles/.libs -L${coin_build_dir}/src/caches/.libs -L${coin_build_dir}/src/details/.libs -L${coin_build_dir}/src/draggers/.libs -L${coin_build_dir}/src/elements/.libs -L${coin_build_dir}/src/engines/.libs -L${coin_build_dir}/src/errors/.libs -L${coin_build_dir}/src/events/.libs -L${coin_build_dir}/src/fields/.libs -L${coin_build_dir}/src/manips/.libs -L${coin_build_dir}/src/misc/.libs -L${coin_build_dir}/src/lists/.libs -L${coin_build_dir}/src/nodekits/.libs -L${coin_build_dir}/src/nodes/.libs -L${coin_build_dir}/src/projectors/.libs -L${coin_build_dir}/src/sensors/.libs"
  COIN_EXTRA_LIBS="-lbaseLINKHACK -lVRMLnodesLINKHACK -lactionsLINKHACK -lbundlesLINKHACK -lcachesLINKHACK -ldetailsLINKHACK -ldraggersLINKHACK -lelementsLINKHACK -lenginesLINKHACK -lerrorsLINKHACK -leventsLINKHACK -lfieldsLINKHACK -lmanipsLINKHACK -lmiscLINKHACK -llistsLINKHACK -lnodekitsLINKHACK -lnodesLINKHACK -lprojectorsLINKHACK -lsensorsLINKHACK $COIN_EXTRA_LIBS"
fi

AC_SUBST(COIN_HACKING_LIBDIRS)


dnl *******************************************************************
dnl * Do we want libtool to use some other depmode? (makedep, cpp, etc)
dnl * 
dnl * By default, dependencies are not made for Solaris, for example...
dnl *******************************************************************

AC_ARG_WITH(depmode,
  AC_HELP_STRING([--with-depmode=MODE], [override dependency mode setting]),
  CCDEPMODE="depmode=${withval}" CXXDEPMODE="depmode=${withval}")

# FIXME: should do a check for whether or not the compilers can
# actually use the given depmode. 20000525 mortene.

dnl *******************************************************************
dnl * Do we want to build the tools?
dnl *******************************************************************

AC_ARG_WITH(tools,
  AC_HELP_STRING([--with-tools], [build Coin-based tools [default=yes]]),
  [case "${withval}" in
    yes) want_tools=yes ;;
    no)  want_tools=no ;;
    *) AC_MSG_ERROR(bad value \"${withval}\" for --with-tools) ;;
  esac],
  [want_tools=yes])

AM_CONDITIONAL(BUILD_TOOLS, test x"$want_tools" = xyes)


dnl *******************************************************************
dnl * Do we want to build the example programs?
dnl *******************************************************************

AC_ARG_WITH(examples,
  AC_HELP_STRING([--with-examples], [build Coin example programs [default=yes]]),
  [case "${withval}" in
    yes) want_examples=yes ;;
    no)  want_examples=no ;;
    *) AC_MSG_ERROR(bad value \"${withval}\" for --with-examples) ;;
  esac],
  [want_examples=yes])

AM_CONDITIONAL(BUILD_EXAMPLES, test x"$want_examples" = xyes)


dnl *******************************************************************
dnl * List all files configure shall generate.
dnl *******************************************************************

SIM_EXPAND_DIR_VARS

AC_OUTPUT([
        coin-config
        Makefile
        include/Makefile
        include/Inventor/Makefile
        include/Inventor/lock/Makefile
        data/Makefile
        data/draggerDefaults/Makefile
        src/Makefile
        src/base/Makefile
        src/VRMLnodes/Makefile
        src/actions/Makefile
        src/bundles/Makefile
        src/caches/Makefile
        src/details/Makefile
        src/draggers/Makefile
        src/elements/Makefile
        src/engines/Makefile
        src/errors/Makefile
        src/events/Makefile
        src/fields/Makefile
        src/manips/Makefile
        src/misc/Makefile
        src/lists/Makefile
        src/nodekits/Makefile
        src/nodes/Makefile
        src/projectors/Makefile
        src/sensors/Makefile
        src/system/Makefile
        tools/Makefile
        tools/ivcat/Makefile
        tools/ivhierarchy/Makefile
        tools/ivNodeKitStructure/Makefile
        tools/renderos/Makefile
        examples/Makefile
        examples/advanced/Makefile
        examples/advanced/elements/Makefile
        ],
        [chmod a+x coin-config])



dnl *******************************************************************
dnl * Platform-specific stuff.
dnl *******************************************************************

ac_coin_unknown_platform=yes

case "$host_os" in
  irix6.2)
    if test "$CXX" = CC; then ac_coin_unknown_platform=no; fi
    ;;
  aix*)
    if test "$CXX" = xlC; then ac_coin_unknown_platform=no; fi
    ;;
  hpux10.20)
    if test "$CXX" = aCC; then ac_coin_unknown_platform=no; fi
    ;;
  linux-gnu)
    case "$host_cpu" in
      i?86)
        ac_coin_unknown_platform=no ;;
    esac
    ;;
  beos)
    case "$host_cpu" in
      i?86)
        if test "$CXX" = c++; then ac_coin_unknown_platform=no; fi
        ;;
    esac
    ;;
esac

if test $ac_coin_unknown_platform = yes; then
  echo
  echo "************************* WARNING ****************************"
  echo "*"
  echo "* We have not tested Coin on the $host_os $host_cpu"
  echo "* platform with the $CXX C++ compiler. Please report"
  echo "* back to us at <coin-support@sim.no> how it works out."
  echo "*"
  echo "**************************************************************"
  echo
fi


case "$host_os" in
  irix*)
    echo ""
    echo " Detected SGI IRIX. There are some hints regarding this platform"
    echo " in the file "
    echo ""
    echo "           ${srcdir}/README.IRIX"
    echo ""
    echo " Please take a look if this is your first time building on IRIX."
    echo ;;

  aix*)
    echo ""
    echo " Detected IBM AIX. There are some hints regarding this platform"
    echo " in the file "
    echo ""
    echo "           ${srcdir}/README.AIX"
    echo ""
    echo " Please take a look if this is your first time building on AIX."
    echo ;;
esac


dnl *******************************************************************
dnl * Made it!
dnl *******************************************************************

echo
echo "Now, run 'make install' to build and install Coin."

dnl ************************************************************************
