# **************************************************************************

# release version number info
m4_define([COIN_MAJOR], [0])
m4_define([COIN_MINOR], [9])
m4_define([COIN_MICRO], [99])

# FIXME: this setup is incorrect, and must be fixed before Coin 1.0
# libtool ABI version info (see HACKING for setup information)
m4_define([COIN_ABI_CURRENT], [COIN_MAJOR])
m4_define([COIN_ABI_REVISION], [m4_eval((COIN_MINOR*100)+COIN_MICRO)])
m4_define([COIN_ABI_AGE], [0])

# **************************************************************************

AC_INIT([Coin], [COIN_MAJOR.COIN_MINOR.COIN_MICRO])
AC_REVISION([$Revision$])

AC_CONFIG_AUX_DIR(cfg)
AC_CONFIG_SRCDIR(src/misc/SoDB.cpp)

SIM_AC_CVS_CHANGES([
  # the moving of "conf-macros" to "cfg/m4"
  SIM_AC_CVS_CHANGE([
    rm -rf conf-macros
    cvs co CoinMacros
  ], [test -d cfg/m4/CVS], [test ! -d conf-macros])
])

# if test -f coin-config; then
#   echo "removing old coin-config script";
#   rm -f coin-config;
# fi

AC_CANONICAL_SYSTEM

# For include/Inventor/system/inttypes.h.
AC_DEFINE_UNQUOTED(COIN_CONFIGURE_BUILD, AC_TR_CPP([$build]), [Build system.])
AC_DEFINE_UNQUOTED(COIN_CONFIGURE_HOST, AC_TR_CPP([$host]), [Build host system.])
AC_DEFINE_UNQUOTED(COIN_CONFIGURE_TARGET, AC_TR_CPP([$target]), [Build target system.])


# If the Microsoft Visual C++ cl.exe compiler is available, set us up for
# compiling with it and to generate an MSWindows .dll file.

SIM_AC_SETUP_MSVC_IFELSE([
], [
  case $host in
  *-cygwin)
    AC_MSG_ERROR([You need Microsoft Visual C++ to build Coin on Cygwin])
    ;;
  esac
])

# **************************************************************************

COIN_MAJOR_VERSION=COIN_MAJOR
COIN_MINOR_VERSION=COIN_MINOR
COIN_MICRO_VERSION=COIN_MICRO
COIN_VERSION=$COIN_MAJOR_VERSION.$COIN_MINOR_VERSION.$COIN_MICRO_VERSION
VERSION=$COIN_VERSION

AC_SUBST(COIN_MAJOR_VERSION)
AC_SUBST(COIN_MINOR_VERSION)
AC_SUBST(COIN_MICRO_VERSION)
AC_SUBST(COIN_VERSION)

# Libtool versioning
LT_CURRENT=COIN_ABI_CURRENT
LT_REVISION=COIN_ABI_REVISION
LT_AGE=COIN_ABI_AGE

AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

#  These are for include/Inventor/SbBasic.h.

AC_DEFINE_UNQUOTED([COIN_MAJOR_VERSION], [$COIN_MAJOR_VERSION],
  [define this to the libCoin major version number])
AC_DEFINE_UNQUOTED([COIN_MINOR_VERSION], [$COIN_MINOR_VERSION],
  [define this to the libCoin minor version number])
AC_DEFINE_UNQUOTED([COIN_MICRO_VERSION], [$COIN_MICRO_VERSION],
  [define this to the libCoin release version number])
AC_DEFINE_UNQUOTED([COIN_VERSION], ["$COIN_VERSION"],
  [define this to the full libCoin major.minor.micro version number])

# *******************************************************************
# Miscellaneous options and initializations.

coin_build_dir=`pwd`

# **************************************************************************
#  Locate C++ compiler and set C++ as the default language to use
#  in tests. The configure script will automatically terminate if
#  it doesn't find a C++ compiler.
AC_PROG_CC
AC_PROG_CXX
AC_LANG_CPLUSPLUS

AC_OBJEXT
AC_EXEEXT

# **************************************************************************

AM_INIT_AUTOMAKE(Coin, $VERSION)

#  Default to not building a static library.
#  Can be overridden by the user with --enable-static.
AM_DISABLE_STATIC

#  Turn off default maintainer make-rules -- use ./bootstrap instead.
AM_MAINTAINER_MODE

if $BUILD_WITH_MSVC; then
  RANLIB=true
  export RANLIB
fi

#  Initialize libtool
AC_PROG_LIBTOOL

case "$host_os" in
  irix*)
    if test x"${AR+set}" != x"set"; then
      if test x"$CXX" = xCC; then
        echo "modifying libtool"
        mv libtool libtool.orig
        sed -e 's/\\\$AR cru/CC -ar -o/' <libtool.orig >libtool
        chmod 755 libtool
        rm -f libtool.orig
      fi
    fi
    ;;
esac

#  These are used for constructing the coin-config file.
COIN_EXTRA_CPPFLAGS=$CPPFLAGS
COIN_EXTRA_CXXFLAGS=
COIN_EXTRA_LDFLAGS=$LDFLAGS
COIN_EXTRA_LIBS=$LIBS
AC_SUBST(COIN_EXTRA_CPPFLAGS)
AC_SUBST(COIN_EXTRA_CXXFLAGS)
AC_SUBST(COIN_EXTRA_LDFLAGS)
AC_SUBST(COIN_EXTRA_LIBS)

## Smoke out some known defunct compilers. ###############################

SIM_AC_COMPILER_INLINE_FOR(,
  [AC_MSG_ERROR([This C++ compiler ("$CXX") is not capable of compiling Coin.])])

SIM_AC_COMPILER_SWITCH_IN_VIRTUAL_DESTRUCTOR(,
  [AC_MSG_ERROR([This C++ compiler ("$CXX") is not capable of compiling Coin.
If you are using the Sun CC compiler, try upgrading to a new version or even
downgrading to an older version.])])

## See which way the compiler knows the name of the current function. ####
SIM_AC_CHECK_VAR_FUNCTIONNAME


## Headers we might want to use. #########################################
AC_CHECK_HEADERS([unistd.h sys/types.h inttypes.h stdint.h sys/param.h io.h windows.h winsock2.h])

AC_CHECK_HEADERS(
  [sys/unistd.h],
  [sim_ac_have_sys_unistd_h=true],
  [sim_ac_have_sys_unistd_h=false])

if $sim_ac_have_sys_unistd_h; then
  AC_MSG_CHECKING([for IN_PATH define conflict])
  AC_TRY_COMPILE(
   [#include <sys/unistd.h>],
   [void * v; v = (void*) IN_PATH;],
   [sim_ac_in_path_defined=true],
   [sim_ac_in_path_defined=false])
  if $sim_ac_in_path_defined; then
    AC_MSG_RESULT([yes])
    AC_DEFINE([COIN_UNDEF_IN_PATH_HACK],,
     [define to "remove" conflicting IN_PATH define from <sys/unistd.h>])
  else
    AC_MSG_RESULT([no])
  fi
fi
    
# According to Coin user Ralf Corsepius, at least SunOS4 needs
# to include sys/types.h before netinet/in.h. There have also
# been a problem report for FreeBSD which seems to indicate
# the same dependency on that platform aswell.
#
# FIXME: should we make this into a general macro
# SIM_AC_CHECK_DEPENDENT_HEADER(HEADER, DEPENDONHEADERS..)? 20001025 mortene.
#
# FIXME2: is this really necessary? AC_CHECK_HEADER(S) tests by using the
# preprocessor, not by doing a compile, so we could probably just
# include netinet/in.h in the above list to AC_CHECK_HEADERS. We wouldn't
# catch problems quiet so early on, though. 20001025 mortene.

AC_CACHE_CHECK([for netinet/in.h], sim_cv_netinet_in_h, [
  AC_TRY_CPP([
    #if HAVE_SYS_TYPES_H
    #include <sys/types.h>
    #endif /* HAVE_SYS_TYPES_H */
    #include <netinet/in.h>],
    [sim_cv_netinet_in_h=true], [sim_cv_netinet_in_h=false])])

if $sim_cv_netinet_in_h; then
  AC_DEFINE_UNQUOTED([HAVE_NETINET_IN_H], [1],
    [Define if you have the <netinet/in.h> header file.])
fi

# For Inventor/system/inttypes.h.in.
#
# Note: this assumes AC_CHECK_HEADERS(sys/types.h stdint.h) has been done.
#
# FIXME: the header file checking should be AC_REQUIREd, if possible.
# 20010711 mortene.

SIM_AC_DEFINE_BYTESIZE_TYPES


# Test for ntohl() etc.
SIM_AC_BYTEORDER_CONVERSION(
  [COIN_EXTRA_LIBS="$sim_ac_byteorder_conversion_libs $COIN_EXTRA_LIBS"],
  [AC_MSG_ERROR([could not find network conversion functions])])


# *******************************************************************

sim_ac_build_library=true
AC_ARG_ENABLE(
  [build],
  [AC_HELP_STRING([--disable-build], [disable configuration for library build])],
  [case $enableval in
  no | false) sim_ac_build_library=false ;;
  esac])

# *******************************************************************
# * Do we want to build the documentation?
# *******************************************************************

AC_ARG_WITH(html,
  AC_HELP_STRING([--with-html], [build and install Coin HTML documentation]),
  [case "${withval}" in
    yes) want_html=yes ;;
    no)  want_html=no ;;
    *) AC_MSG_ERROR(bad value "${withval}" for --with-html) ;;
  esac],
  [want_html=no])

coin_html_dir=`eval echo $datadir/Coin/html`

AC_ARG_WITH(man,
  AC_HELP_STRING([--with-man], [build and install Coin man pages]),
  [case "${withval}" in
    yes) want_man=yes ;;
    no)  want_man=no ;;
    *) AC_MSG_ERROR(bad value "${withval}" for --with-man) ;;
  esac],
  [want_man=no])

coin_man_dir=`eval echo $mandir`

# Used in the Doxygen parameter file.
COIN_DOC_HTML=`echo $want_html | tr '[a-z]' '[A-Z]'`
COIN_DOC_MAN=`echo $want_man | tr '[a-z]' '[A-Z]'`
AC_SUBST(COIN_DOC_HTML)
AC_SUBST(coin_html_dir)
AC_SUBST(COIN_DOC_MAN)
AC_SUBST(coin_man_dir)

if test x"$want_html" != xno -o x"$want_man" != xno; then
  SIM_AC_DOXYGEN_TOOL(, AC_MSG_ERROR([Could not find the doxygen tool -- see http://www.stack.nl/~dimitri/doxygen/]))
  sim_ac_doxygen_our_version=1.2.1
  if test x"$sim_ac_doxygen_avail" != x"$sim_ac_doxygen_our_version"; then
    AC_MSG_WARN(You are not using Doxygen version $sim_ac_doxygen_our_version)
  fi

  AC_PATH_PROG(sim_ac_perl_exe, perl, false, $PATH)
  if test x"$sim_ac_perl_exe" = xfalse; then
    AC_MSG_WARN(Could not find the Perl executable)
  fi
fi

# path_tag is used to identify paths in docs/coin.doxygen that needs to be
# transformed using cygpath under cygwin.

case $host in
*-cygwin) path_tag="<PATH>" ;;
*)        path_tag= ;;
esac

AC_SUBST(path_tag)

# *******************************************************************
# Configure an alternate installation?

AC_ARG_WITH(
  [alternate],
  [AC_HELP_STRING([--with-alternate=string],
                  [specify name of alternate configuration])],
  [CONFIG=$withval],
  [CONFIG=default])

AC_ARG_WITH(
  [suffix],
  [AC_HELP_STRING([--with-suffix=string],
                  [specify lirary name suffix (e.g. "_g")])],
  [SUFFIX=$withval],
  [SUFFIX=])

AC_SUBST(CONFIG)
AC_SUBST(SUFFIX)

# *******************************************************************
# * Check compiler features, bugs, etc.
# *******************************************************************

SIM_AC_COMPILE_DEBUG([
  CPPFLAGS="$CPPFLAGS -DCOIN_DEBUG=1"
], [
  CPPFLAGS="$CPPFLAGS -DCOIN_DEBUG=0"
])

SIM_AC_DEBUGSYMBOLS
SIM_AC_RTTI_SUPPORT
SIM_EXCEPTION_HANDLING
SIM_PROFILING_SUPPORT
SIM_COMPILER_WARNINGS

#  Yep, this is important in case we want to add code to make
#  the API interface "Open Inventor strict", meaning the user must
#  use the exact same include files as under "real" Open Inventor.
#  We would then need to know that we are actually allowed to include
#  any file during internal build.
#
#  The COIN_INTERNAL define is also in use to detect
#  "inefficient including" internally.

CPPFLAGS="$CPPFLAGS -DCOIN_INTERNAL"

# **************************************************************************
# do not install unchanged headers

INSTALL_HEADER="\
INSTALL='\$(INSTALL_DATA)' \$(SHELL) \$(top_srcdir)/cfg/install-header"
AC_SUBST(INSTALL_HEADER)

# **************************************************************************

# Try to find snprintf() and vsnprintf() on the system.
SIM_CHECK_NPRINTF

SIM_AC_CHECK_MACRO_QUOTE([],
  [AC_MSG_ERROR(couldn't figure out how to quote strings in macros)])
if test x"$sim_ac_quote_hash" = xyes; then
  AC_DEFINE([HAVE_HASH_QUOTING],,
    [define if preprocessor can quote arguments with the hash symbol])
else
  if test x"$sim_ac_quote_apostrophes" = xyes; then
    AC_DEFINE([HAVE_APOSTROPHES_QUOTING],,
      [define if preprocessor can quote arguments with apostophes])
  fi
fi


if $sim_ac_build_library; then

# *******************************************************************
# * Test to see if dynamic linking through either the (Linux/IRIX/...)
# * dl library or the Win32 LoadLibrary() call is available.
# *******************************************************************

coin_can_do_runtime_linking=false

SIM_AC_CHECK_DL([
  AC_DEFINE_UNQUOTED([HAVE_DL_LIB],, [define if you have the dl library])
  COIN_EXTRA_CPPFLAGS="$COIN_EXTRA_CPPFLAGS $sim_ac_dl_cppflags"
  COIN_EXTRA_LDFLAGS="$COIN_EXTRA_LDFLAGS $sim_ac_dl_ldflags"
  COIN_EXTRA_LIBS="$sim_ac_dl_libs $COIN_EXTRA_LIBS"
  coin_can_do_runtime_linking=true
])

if $coin_can_do_runtime_linking; then
  :
else
  SIM_AC_CHECK_LOADLIBRARY([
    AC_DEFINE_UNQUOTED([HAVE_WINDLL_RUNTIME_BINDING],,
                       [define if the Win32 LoadLibrary method is available])
    coin_can_do_runtime_linking=true
  ])
fi

# *******************************************************************
# * Set us up for using the simage library (if wanted, and if
# * available).
# *******************************************************************

AC_ARG_ENABLE([dl-simage],
  AC_HELP_STRING([--enable-dl-simage],
                 [use runtime dynamic linking for libsimage if possible [[default=yes]]]),
  [case "${enableval}" in
    yes | true) enable_dl_simage=true ;;
    no | false) enable_dl_simage=false ;;
    *) AC_MSG_ERROR(bad value "${enableval}" for --enable-dl-simage) ;;
  esac],
  [enable_dl_simage=true])

if $enable_dl_simage && $coin_can_do_runtime_linking; then
  AC_DEFINE_UNQUOTED([SIMAGE_RUNTIME_LINKING],,
    [define for runtime linking with simage])
  SIM_AC_CONFIGURATION_SETTING([simage linkage], [run-time binding])
else
  SIM_AC_HAVE_SIMAGE_IFELSE([
    AC_DEFINE([HAVE_LIBSIMAGE],,
      [define if you have the simage library])
    CPPFLAGS="$CPPFLAGS $sim_ac_simage_cppflags"
    LDFLAGS="$LDFLAGS $sim_ac_simage_ldflags"
    LIBS="$sim_ac_simage_libs $LIBS"
    COIN_EXTRA_CPPFLAGS="$COIN_EXTRA_CPPFLAGS $sim_ac_simage_cppflags"
    COIN_EXTRA_LDFLAGS="$COIN_EXTRA_LDFLAGS $sim_ac_simage_ldflags"
    COIN_EXTRA_LIBS="$sim_ac_simage_libs $COIN_EXTRA_LIBS"
    SIM_AC_CONFIGURATION_SETTING([simage linkage], [link-time binding])
  ], [
    if $sim_ac_simage_desired; then
      AC_MSG_WARN(simage development system not found);
    fi
    SIM_AC_CONFIGURATION_SETTING([simage linkage], [no simage support])
  ])
fi


# *******************************************************************
# * Mathlib stuff.
# *******************************************************************

SIM_AC_MATHLIB_READY_IFELSE(,[
  SIM_AC_CHECK_MATHLIB(COIN_EXTRA_LIBS="$COIN_EXTRA_LIBS $sim_ac_libm",
                       AC_MSG_ERROR(could not find a way to use math library))
])

AC_CACHE_CHECK([whether single-precision math functions are available],
  sim_cv_func_singleprec_avail,
  [AC_TRY_LINK([#include <math.h>],
               [(void)sqrtf(1.0f);
                (void)powf(1.0f, 1.0f);
                (void)cosf(1.0f);
                (void)sinf(1.0f);
                (void)tanf(1.0f);
                (void)acosf(1.0f);
                (void)asinf(1.0f);
                (void)atanf(1.0f);
                (void)atan2f(1.0f, 1.0f);],
               sim_cv_func_singleprec_avail=true,
               sim_cv_func_singleprec_avail=false)])

$sim_cv_func_singleprec_avail &&
  AC_DEFINE([HAVE_SINGLEPRECISION_MATH],,
    [define if single-precision math functions are avialable])

# *******************************************************************
# * Handle the detection and inclusion of X11 libraries.
# *******************************************************************

SIM_AC_CHECK_X11([COIN_EXTRA_CPPFLAGS="$COIN_EXTRA_CPPFLAGS $sim_ac_x11_cppflags"
                  COIN_EXTRA_LDFLAGS="$COIN_EXTRA_LDFLAGS $sim_ac_x11_ldflags"
                  COIN_EXTRA_LIBS="$sim_ac_x11_libs $COIN_EXTRA_LIBS"])

if test x"$sim_ac_x11_avail" = xyes; then
  #  If the X11 shared memory extension is available, include it as
  #  the Mesa library has probably been linked against it.
  SIM_AC_CHECK_X11SHMEM(COIN_EXTRA_LIBS="$sim_ac_x11shmem_libs $COIN_EXTRA_LIBS")
fi


# *******************************************************************
# * Test for installation of Mesa or OpenGL development system.
# *******************************************************************

SIM_AC_CHECK_OPENGL([AC_DEFINE([HAVE_OPENGL],, [define if you have OpenGL])
                    COIN_EXTRA_CPPFLAGS="$COIN_EXTRA_CPPFLAGS $sim_ac_gl_cppflags"
                    COIN_EXTRA_LDFLAGS="$COIN_EXTRA_LDFLAGS $sim_ac_gl_ldflags"
                    COIN_EXTRA_LIBS="$sim_ac_gl_libs $COIN_EXTRA_LIBS"])

if test x"$sim_ac_gl_avail" = xyes; then

  # *******************************************************************
  # ** Check what OpenGL->windowsystem bindings are available.
  # *******************************************************************

  SIM_AC_HAVE_GLX_IFELSE( AC_DEFINE([HAVE_GLX],, [define if you have GLX X11 OpenGL bindings]) )

  SIM_AC_HAVE_WGL_IFELSE(
    AC_DEFINE([HAVE_WGL],, [define if you have WGL Win32 OpenGL bindings])
    LIBS="$LIBS $sim_ac_wgl_libs"
    COIN_EXTRA_LIBS="$COIN_EXTRA_LIBS $sim_ac_wgl_libs"
  )


  # *******************************************************************
  # ** Check if GLU should be loaded and linked at runtime (to avoid
  # ** install dependency libCoin -> libGLU).
  # *******************************************************************
  AC_ARG_ENABLE([dl-glu],
    AC_HELP_STRING([--enable-dl-glu],
                   [use runtime dynamic linking for GLU if possible [[default=yes]]]),
    [case "${enableval}" in
      yes | true) enable_dl_glu=true ;;
      no | false) enable_dl_glu=false ;;
      *) AC_MSG_ERROR(bad value "${enableval}" for --enable-dl-glu) ;;
    esac],
    [enable_dl_glu=true])

  if $coin_can_do_runtime_linking && $enable_dl_glu; then
    # See if GLU is part of GL library (this is the case on BeOS, for
    # instance) before setting us up for runtime linking.
    SIM_AC_GLU_READY_IFELSE([
      AC_DEFINE([HAVE_GLU],, [define if you have GLU])
      SIM_AC_CONFIGURATION_SETTING([GLU linkage], [part of GL library])
    ], [
      AC_DEFINE_UNQUOTED([GLU_RUNTIME_LINKING],,
        [define for runtime linking with GLU])
      SIM_AC_CONFIGURATION_SETTING([GLU linkage], [run-time binding])
    ])
  else
    # *******************************************************************
    # ** Check if GLU headers and lib is available on build host.
    # *******************************************************************
    SIM_AC_CHECK_GLU([
      AC_DEFINE([HAVE_GLU],, [define if you have GLU])
      COIN_EXTRA_CPPFLAGS="$COIN_EXTRA_CPPFLAGS $sim_ac_glu_cppflags"
      COIN_EXTRA_LDFLAGS="$COIN_EXTRA_LDFLAGS $sim_ac_glu_ldflags"
      COIN_EXTRA_LIBS="$sim_ac_glu_libs $COIN_EXTRA_LIBS"
      SIM_AC_CONFIGURATION_SETTING([GLU linkage], [link-time binding])
    ], [
      SIM_AC_CONFIGURATION_SETTING([GLU linkage], [no GLU support])
    ])
  fi


else # couldn't link with OpenGL
  # Don't stop the configure process if we seem to be configuring to build
  # the documentation (I don't care to install an OpenGL development system
  # on our webserver). 20000703 mortene.
  if test x"$want_html" = xno -a x"$want_man" = xno; then
    # FIXME: should be able to handle systems where OpenGL is not available,
    # as it would be handy for making e.g. import/export-only versions of the
    # library. 20000123 mortene.
    AC_MSG_ERROR(needs an OpenGL-compatible development system installed to compile Coin)
  else
    AC_MSG_WARN(needs an OpenGL-compatible development system installed to compile Coin)
  fi

fi

# *******************************************************************
# * Provide this nasty hack to help building Coin on platforms
# * where one can bump into the "Arg list too long" problem
# * (IBM AIX, SGI IRIX 6.2 and IRIX 6.5 with standard settings are
# * known to fail).
# *******************************************************************

AC_ARG_ENABLE(compact,
  AC_HELP_STRING([--enable-compact], [enable hack for compact compilation [[default=no]]]),
  [case "${enableval}" in
    yes | true)  enable_compact=yes ;;
    no | false)  enable_compact=no ;;
    *) AC_MSG_ERROR(bad value "${enableval}" for --enable-compact) ;;
  esac],
  enable_compact=no)

AM_CONDITIONAL(HACKING_COMPACT_BUILD, test x"$enable_compact" = x"yes")

# *******************************************************************
# * Enable/disable compilation with the "incremental linking through
# * the use of dynamic libraries"-hack.
# *******************************************************************

AC_ARG_ENABLE(hacking,
  AC_HELP_STRING([--enable-hacking], [enable hacks for quick turn-around cycles during development [[default=no]]]),
  [case "${enableval}" in
    yes | true)  enable_hacking=yes ;;
    no | false)  enable_hacking=no ;;
    *) AC_MSG_ERROR(bad value "${enableval}" for --enable-hacking) ;;
  esac],
  enable_hacking=no)

AM_CONDITIONAL(HACKING_DYNAMIC_MODULES, test x"$enable_hacking" = x"yes")

COIN_HACKING_LIBDIRS=
if test x"$enable_hacking" = x"yes"; then
  COIN_HACKING_LIBDIRS="-L${coin_build_dir}/src/base/.libs -L${coin_build_dir}/src/VRMLnodes/.libs -L${coin_build_dir}/src/actions/.libs -L${coin_build_dir}/src/bundles/.libs -L${coin_build_dir}/src/caches/.libs -L${coin_build_dir}/src/details/.libs -L${coin_build_dir}/src/draggers/.libs -L${coin_build_dir}/src/elements/.libs -L${coin_build_dir}/src/engines/.libs -L${coin_build_dir}/src/errors/.libs -L${coin_build_dir}/src/events/.libs -L${coin_build_dir}/src/fields/.libs -L${coin_build_dir}/src/manips/.libs -L${coin_build_dir}/src/misc/.libs -L${coin_build_dir}/src/lists/.libs -L${coin_build_dir}/src/nodekits/.libs -L${coin_build_dir}/src/nodes/.libs -L${coin_build_dir}/src/projectors/.libs -L${coin_build_dir}/src/sensors/.libs"
  COIN_EXTRA_LIBS="-lbase${SUFFIX}LINKHACK -lVRMLnodes${SUFFIX}LINKHACK -lactions${SUFFIX}LINKHACK -lbundles${SUFFIX}LINKHACK -lcaches${SUFFIX}LINKHACK -ldetails${SUFFIX}LINKHACK -ldraggers${SUFFIX}LINKHACK -lelements${SUFFIX}LINKHACK -lengines${SUFFIX}LINKHACK -lerrors${SUFFIX}LINKHACK -levents${SUFFIX}LINKHACK -lfields${SUFFIX}LINKHACK -lmanips${SUFFIX}LINKHACK -lmisc${SUFFIX}LINKHACK -llists${SUFFIX}LINKHACK -lnodekits${SUFFIX}LINKHACK -lnodes${SUFFIX}LINKHACK -lprojectors${SUFFIX}LINKHACK -lsensors${SUFFIX}LINKHACK $COIN_EXTRA_LIBS"
fi

AC_SUBST(COIN_HACKING_LIBDIRS)

fi

# *******************************************************************
# * For exposing various build, src and installation paths to
# * misc configuration files under the $top_src_dir/build/ directory.
# *******************************************************************

coin_src_dir=`cd $srcdir; pwd`

AC_SUBST(coin_build_dir)
AC_SUBST(coin_src_dir)

# **************************************************************************
# Remove redundant options from certain option lists.

SIM_AC_UNIQIFY_LIST(COIN_EXTRA_CPPFLAGS, -I$includedir $COIN_EXTRA_CPPFLAGS)
SIM_AC_UNIQIFY_LIST(COIN_EXTRA_LDFLAGS, -L$libdir $COIN_EXTRA_LDFLAGS)
SIM_AC_UNIQIFY_LIST(COIN_EXTRA_LIBS, $COIN_EXTRA_LIBS)
SIM_AC_UNIQIFY_LIST(CPPFLAGS, $CPPFLAGS)
SIM_AC_UNIQIFY_LIST(LDFLAGS, $LDFLAGS)
SIM_AC_UNIQIFY_LIST(LIBS, $LIBS)

case $enable_static in
yes | true)  COIN_STATIC=true;;
*)           COIN_STATIC=false;;
esac

case $enable_shared in
yes | true)  COIN_SHARED=true;;
*)           COIN_SHARED=false;;
esac

LIBFLAGS=

# AC_SUBST(COIN_SHARED)
# AC_SUBST(COIN_STATIC)
AC_SUBST(LIBFLAGS)


# **************************************************************************
# Remaining setup based on platform.

AM_CONDITIONAL(BUILD_WITH_MSVC, $BUILD_WITH_MSVC)

if $sim_ac_build_library; then
  if $BUILD_WITH_MSVC; then
    if $COIN_STATIC; then
      # forgot to include this case in SbBasic.h.in :(
      CPPFLAGS="-DCOIN_NOT_DLL $CPPFLAGS"
      # COIN_EXTRA_CPPFLAGS is set up further down
    else
      CPPFLAGS="-DCOIN_MAKE_DLL $CPPFLAGS"
      COIN_EXTRA_CPPFLAGS="$COIN_EXTRA_CPPFLAGS -DCOIN_DLL"
    fi

    debugfile="`pwd`/src/coin${COIN_MAJOR_VERSION}${SUFFIX}.pdb"
    debugfile=`cygpath -w "$debugfile" | sed 's,\\\\,\\\\\\\\,g'`

    if $COIN_STATIC; then
      SIM_AC_CONFIGURATION_SETTING([Coin build type], [static .lib])
      LIBFLAGS="-LIB"
      LIBFLAGS="$LIBFLAGS /OUT:coin$COIN_MAJOR_VERSION$SUFFIX.lib"
      COIN_EXTRA_CPPFLAGS="-I$includedir -DCOIN_NOT_DLL"
      COIN_EXTRA_LDFLAGS="-L$libdir"
      COIN_EXTRA_LIBS=
    else
      LIBFLAGS="-DLL /INCREMENTAL:NO"
      case $enable_symbols in
      no | false)
        SIM_AC_CONFIGURATION_SETTING([Coin build type],
                                     [dynamic .dll, no symbols])
        LIBFLAGS="$LIBFLAGS /RELEASE"
        ;;
      *)
        SIM_AC_CONFIGURATION_SETTING([Coin build type],
                                     [dynamic .dll + .pdb])
        CFLAGS="/Fd$debugfile $CFLAGS"
        CXXFLAGS="/Fd$debugfile $CXXFLAGS"
        LIBFLAGS="$LIBFLAGS /DEBUG /PDB:coin$COIN_MAJOR_VERSION$SUFFIX.pdb"
        ;;
      esac
      LIBFLAGS="$LIBFLAGS /OUT:coin$COIN_MAJOR_VERSION$SUFFIX.dll"
    fi
  
    # We use a version suffix on the .dll-file, so several incompatible
    # (major) versions can be installed on a system.
    #
    # BTW, when linking DLLs, the 3rd-party .lib files will be
    # linked into the .dll file. I believe it is still advisable to
    # list all libs used upon `coin-config --libs`, as we can then
    # also use them from "parent" code (remember that their interfaces
    # is not exposed from the DLL) without any fuss.
    if test -n "$COIN_EXTRA_LIBS"; then
      COIN_EXTRA_LIBS="-lcoin${COIN_MAJOR_VERSION}${SUFFIX} $COIN_EXTRA_LIBS"
    else
      COIN_EXTRA_LIBS="-lcoin${COIN_MAJOR_VERSION}${SUFFIX}"
    fi
  else
    if test -n "$COIN_EXTRA_LIBS"; then
      COIN_EXTRA_LIBS="-lCoin${SUFFIX} $COIN_EXTRA_LIBS"
    else
      COIN_EXTRA_LIBS="-lCoin${SUFFIX}"
    fi

    # For the build/coin.spec RPM specification file.
    SIM_AC_ISO8601_DATE(coin_configure_date)
    AC_SUBST(coin_configure_date)
  fi
else
  SIM_AC_CONFIGURATION_SETTING([Coin build type], [build disabled])
fi

# **************************************************************************

AM_CONFIG_HEADER(include/config.h)

AC_CONFIG_FILES([
        Makefile
        include/Makefile
        include/Inventor/Makefile
        include/Inventor/lock/Makefile
        include/Inventor/system/Makefile
        data/Makefile
        data/draggerDefaults/Makefile
        src/Makefile
        src/base/Makefile
        src/VRMLnodes/Makefile
        src/actions/Makefile
        src/bundles/Makefile
        src/caches/Makefile
        src/details/Makefile
        src/draggers/Makefile
        src/elements/Makefile
        src/engines/Makefile
        src/errors/Makefile
        src/events/Makefile
        src/fields/Makefile
        src/manips/Makefile
        src/misc/Makefile
        src/lists/Makefile
        src/nodekits/Makefile
        src/nodes/Makefile
        src/projectors/Makefile
        src/sensors/Makefile
        build/Makefile
        build/coin.spec
        docs/coin.doxygen
])

AC_OUTPUT

# *******************************************************************
# * Platform-specific stuff.
# *******************************************************************

if $sim_ac_build_library; then
  ac_coin_unknown_platform=yes
else
  ac_coin_unknown_platform=no
fi

case "$host_os" in
  irix6.2)
    if test "$CXX" = CC; then ac_coin_unknown_platform=no; fi
    ;;
  irix6.5)
    if test "$CXX" = CC; then ac_coin_unknown_platform=no; fi
    ;;
  aix*)
    if test "$CXX" = xlC; then ac_coin_unknown_platform=no; fi
    ;;
  hpux10.20)
    if test "$CXX" = aCC; then ac_coin_unknown_platform=no; fi
    ;;
  linux-gnu)
    case "$host_cpu" in
      i?86)
        ac_coin_unknown_platform=no ;;
    esac
    ;;
  cygwin*)
    case "$CXX" in
      *msvccc) ac_coin_unknown_platform=no ;;
    esac
    ;;
  beos)
    case "$host_cpu" in
      i?86)
        if test "$CXX" = c++; then ac_coin_unknown_platform=no; fi
        ;;
    esac
    ;;
esac

if test $ac_coin_unknown_platform = yes; then
  echo
  echo "************************* WARNING ****************************"
  echo "*"
  echo "* We have not tested Coin on the $host_os $host_cpu"
  echo "* platform with the $CXX C++ compiler. Please report"
  echo "* back to us at <coin-support@sim.no> how it works out."
  echo "*"
  echo "**************************************************************"
  echo
fi

if $sim_ac_build_library; then
  case "$host_os" in
  irix*)
    echo ""
    echo " Detected SGI IRIX. There are some hints regarding this platform"
    echo " in the file "
    echo ""
    echo "           ${srcdir}/README.IRIX"
    echo ""
    echo " Please take a look if this is your first time building on IRIX."
    echo ""
    ;;
  aix*)
    echo ""
    echo " Detected IBM AIX. There are some hints regarding this platform"
    echo " in the file "
    echo ""
    echo "           ${srcdir}/README.AIX"
    echo ""
    echo " Please take a look if this is your first time building on AIX."
    echo ""
    ;;
  esac
fi

SIM_AC_CONFIGURATION_SUMMARY

if $sim_ac_build_library; then
  echo ""
  echo "Now, run 'make install' to build and install Coin."
  echo ""
else
  echo ""
fi

