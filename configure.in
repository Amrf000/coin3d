#  This can be any file in the package.
AC_INIT(src/misc/SoDB.cpp)

# **************************************************************************
# If the Microsoft Visual C++ cl.exe compiler is available, set us up for
# compiling with it and to generate an MSWindows .dll file.

# FIXME: replace with the SIM_AC_MSVC_SUPPORT macro as soon as we
# have converted auxconfig-dir to cfg/m4/. 20001123 mortene.

BUILD_WITH_MSVC=false
sim_ac_msvccc=`cd $srcdir; pwd`/conf-macros/msvccc
if test -z "$CC" && test -z "$CXX" && $sim_ac_msvccc >/dev/null 2>&1; then
  CC=$sim_ac_msvccc
  CXX=$sim_ac_msvccc
  export CC CXX
  BUILD_WITH_MSVC=true
fi
AC_SUBST(BUILD_WITH_MSVC)


# **************************************************************************
#  Locate C++ compiler and set C++ as the default language to use
#  in tests. The configure script will automatically terminate if
#  it doesn't find a C++ compiler.
AC_PROG_CXX
AC_LANG_CPLUSPLUS

SIM_COMPILER_INLINE_FOR(, AC_MSG_ERROR(the "$CXX" C++ compiler is not capable of compiling Coin))
SIM_AC_CHECK_VAR_FUNCTIONNAME

# **************************************************************************
# *******  MAKING RELEASES  ************************************************
# **************************************************************************
#
# Library versioning
# ==================
#
# When making releases, follow these rules:
#
#  * if there has been made any incompatible changes to the ABI¹:
#    COIN_MAJOR_VERSION += 1, COIN_MINOR_VERSION = 0,
#    COIN_MICRO_VERSION = 0.
#
#    (If you don't know if the changes that have been made since last
#    release is binary incompatible with the last ABI, you shouldn't
#    be making releases.)
#
#  * if there has been made additions to the API², but the ABI
#    is still backwards compatible: COIN_MAJOR_VERSION unchanged,
#    COIN_MINOR_VERSION += 1, COIN_MICRO_VERSION = 0.
#
#  * for bugfix releases and other changes which do not change the interface
#    at all, keep COIN_MAJOR_VERSION and COIN_MINOR_VERSION unchanged
#    and COIN_MICRO_VERSION += 1.
#
# Note that our MAJOR.MINOR.MICRO versioning scheme differs somewhat from
# the idea of library versioning applied by Libtool. According to Libtool,
# libraries should be versioned according to a CURRENT.AGE.REVISION scheme.
# Here CURRENT is supposed to be increased by 1 each time the API changes,
# and AGE increased by 1 along with CURRENT each time the API changes in a
# way which keeps the ABI backwards compatible. If compatibility is broken,
# AGE is set to 0 (while CURRENT is still increased by 1). The REVISION
# number has the same semantics as our MICRO number.
#
# To cooperate in a painless way with Libtool, we choose to "convert" our
# MAJOR.MINOR.MICRO scheme to Libtool's idea of versioning like this:
#
#    * Libtool's CURRENT number is increased when our MAJOR number is
#      increased.
#
#    * Libtool's AGE number is always kept at 0 (i.e. we will never make
#      ABI compatible releases where we increase the MAJOR number).
#
#    * Libtool's REVISION number will be a combination of our MINOR and
#      MICRO number, like this: REVISION = MINOR * 100 + MICRO, so we get
#      a REVISION number monotonically increasing in the way we want.
#
#      Note that this little "simplification" has two important
#      ramifications: 1) we can't make more than 99 bugfix-releases of
#      the library unless a MINOR or MAJOR version increase has happened,
#      2) we need to keep a release history log to map from Libtool numbers
#      back to our "native" MACRO.MINOR.MICRO versioning, as Libtool encodes
#      the filename of the library with it's own CURRENT.AGE.REVISION scheme.
#      This way it'll still be easy for us to find out which version a
#      bugreport belongs to: we must tell the user to check out the full
#      filename of the library, then we can just look up the MAJOR.MINOR.MICRO
#      number from the release history log below.
#
#
# **************************************************************************
# CVS maintenance
# ===============
#
# When making a release from the HEAD branch, increase the MAJOR number
# and make a new branch as follows (from the HEAD):
#
#   $ cd [coin_srcdir_HEADbranch]
#   $ cvs tag -b coin-MAJOR-0
#
# (The explicit mention of "coin" in the branch name is necessary
# because we also tag this name onto all included CVS modules.)
#
# Note that new releases from the HEAD branch should only happen when
# there has been incompatible interface changes.
#
#
# When adding new functionality while keeping backward ABI compatibility,
# increase the MINOR number and make a new branch as follows:
#
#   $ cd [coin_srcdir_MAJORbranch]
#   $ cvs tag -b coin-MAJOR-MINOR
#
# (Where MINOR>0 always).
#
#
# Bugfix releases should be handled by setting a tag on the
# coin-MAJOR-MINOR with the latest MAJOR.MINOR.x release,
# like this:
#
#   $ cd [coin_srcdir_MAJORMINORbranch]
#   $ cvs tag coin-MAJOR-MINOR-MICRO
#
# (Where MICRO>0 always).
#
# **************************************************************************
# Distribution binaries
# =====================
#
#  * MSWindows SDK: this is constructed as a self-extracting InstallShield
#    package. Run ``configure'' and ``make install'' on an MSWin-box with
#    the correct setup (latest Cygwin, MSVC++ v6.0 and InstallShield Express
#    v2.12), then execute
#
#         $ cd [coin_builddir]/build
#         $ make ispkg
#
#    (Installshield's IsxBuild.exe need to be in your path.)
#
#    A self-extracting executable SETUPEX.EXE with the InstallShield install
#    should then be available under [coin_builddir]/build/coin/. Move
#    to <ftp://ftp.sim.no/pub/coin/bin/win32/coin-@COIN_VERSION@.exe>.
#
#  * RPM packages: follow the instructions at the top of the
#    build/coin.spec.in file, make one package for each major platform
#    version we have access to (RedHat v5, v6, v7, Mandrake?, SuSE, etc)
#    for the architectures we want (i386, ...). Place packages under
#    <ftp://ftp.sim.no/pub/coin/bin/[platform]/[arch]/>.
#
# **************************************************************************
# Release history
# ===============
#
# Release version     | Libtool version   |                 |
# (MAJOR.MINOR.MICRO) | (CURRENT.AGE.REV) | CVS Branch name | Tag name
# --------------------+-------------------+-----------------+-----------------
#     0.9.99          |     0.0.999       |      HEAD       | coin-0-9-99
#
#
# **************************************************************************
# Footnotes
# =========
#
# ¹ Application Binary Interface. This covers any publicly exposed
#   functions, function signatures, structures (and classes for C++
#   code). If any functions has been removed or changed, or if any
#   structures/classes has been modified in any way, the ABI has
#   most likely been made incompatible with earlier releases.
#
# ² Application Programmer's Interface. This is the functions and data
#   structures/classes exposed to the application programmer for
#   interaction with the library.
#
# **************************************************************************

COIN_MAJOR_VERSION=0
COIN_MINOR_VERSION=9
COIN_MICRO_VERSION=99
COIN_VERSION=$COIN_MAJOR_VERSION.$COIN_MINOR_VERSION.$COIN_MICRO_VERSION
VERSION=$COIN_VERSION

AC_SUBST(COIN_MAJOR_VERSION)
AC_SUBST(COIN_MINOR_VERSION)
AC_SUBST(COIN_MICRO_VERSION)
AC_SUBST(COIN_VERSION)

# Libtool versioning
LT_CURRENT=$COIN_MAJOR_VERSION
LT_AGE=0
LT_REVISION=`expr $COIN_MINOR_VERSION \* 100 + $COIN_MICRO_VERSION`

AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

#  These are for include/Inventor/SbBasic.h.

AC_DEFINE_UNQUOTED(COIN_MAJOR_VERSION, $COIN_MAJOR_VERSION, [define this to the libCoin major version number])
AC_DEFINE_UNQUOTED(COIN_MINOR_VERSION, $COIN_MINOR_VERSION, [define this to the libCoin minor version number])
AC_DEFINE_UNQUOTED(COIN_MICRO_VERSION, $COIN_MICRO_VERSION, [define this to the libCoin release version number])
AC_DEFINE_UNQUOTED(COIN_VERSION, "$COIN_VERSION", [define this to the full libCoin major.minor.micro version number])

# *******************************************************************
# Miscellaneous options and initializations.

coin_build_dir=`pwd`

AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(libCoin, $VERSION)

#  Files to cram results from the configure tests into.
AM_CONFIG_HEADER(config.h include/Inventor/SbBasic.h)

#  Default to not building a static library.
#  Can be overridden by the user with --enable-static.
AM_DISABLE_STATIC

#  Turn off default maintainer make-rules -- use ./bootstrap instead.
AM_MAINTAINER_MODE

#  Initialize libtool
AC_PROG_LIBTOOL


#  These are used for constructing the coin-config file.
COIN_EXTRA_CPPFLAGS=$CPPFLAGS
COIN_EXTRA_LDFLAGS=$LDFLAGS
COIN_EXTRA_LIBS=$LIBS
AC_SUBST(COIN_EXTRA_CPPFLAGS)
AC_SUBST(COIN_EXTRA_LDFLAGS)
AC_SUBST(COIN_EXTRA_LIBS)


AC_CHECK_HEADERS([unistd.h sys/types.h sys/param.h io.h windows.h winsock2.h])

# According to Coin user Ralf Corsepius, at least SunOS4 needs
# to include sys/types.h before netinet/in.h. There have also
# been a problem report for FreeBSD which seems to indicate
# the same dependency on that platform aswell.
#
# FIXME: should we make this into a general macro
# SIM_AC_CHECK_DEPENDENT_HEADER(HEADER, DEPENDONHEADERS..)? 20001025 mortene.
#
# FIXME2: is this really necessary? AC_CHECK_HEADER(S) tests by using the
# preprocessor, not by doing a compile, so we could probably just
# include netinet/in.h in the above list to AC_CHECK_HEADERS. We wouldn't
# catch problems quiet so early on, though. 20001025 mortene.

AC_CACHE_CHECK([netinet/in.h], sim_cv_netinet_in_h, [
  AC_TRY_COMPILE([
    #if HAVE_SYS_TYPES_H
    #include <sys/types.h>
    #endif /* HAVE_SYS_TYPES_H */
    #include <netinet/in.h>],
    [], [sim_cv_netinet_in_h=true], [sim_cv_netinet_in_h=false])])

if $sim_cv_netinet_in_h; then
  AC_DEFINE_UNQUOTED(HAVE_NETINET_IN_H, 1, [Define if you have the <netinet/in.h> header file.])
fi


# Test for ntohl() etc.
SIM_AC_BYTEORDER_CONVERSION(
  [COIN_EXTRA_LIBS="$sim_ac_byteorder_conversion_libs $COIN_EXTRA_LIBS"],
  [AC_MSG_ERROR([could not find network conversion functions])])


# *******************************************************************
# * Do we want to build the documentation?
# *******************************************************************

AC_ARG_WITH(html,
  AC_HELP_STRING([--with-html], [build and install Coin HTML documentation]),
  [case "${withval}" in
    yes) want_html=yes ;;
    no)  want_html=no ;;
    *) AC_MSG_ERROR(bad value "${withval}" for --with-html) ;;
  esac],
  [want_html=no])

AC_ARG_WITH(man,
  AC_HELP_STRING([--with-man], [build and install Coin man pages]),
  [case "${withval}" in
    yes) want_man=yes ;;
    no)  want_man=no ;;
    *) AC_MSG_ERROR(bad value "${withval}" for --with-man) ;;
  esac],
  [want_man=no])

# Used in the Doxygen parameter file.
COIN_DOC_HTML=`echo $want_html | tr a-z A-Z`
COIN_DOC_MAN=`echo $want_man | tr a-z A-Z`
AC_SUBST(COIN_DOC_HTML)
AC_SUBST(COIN_DOC_MAN)

if test x"$want_html" != xno -o x"$want_man" != xno; then
  SIM_AC_DOXYGEN_TOOL(, AC_MSG_ERROR([Could not find the doxygen tool -- see http://www.stack.nl/~dimitri/doxygen/]))
  sim_ac_doxygen_our_version=1.2.1
  if test x"$sim_ac_doxygen_avail" != x"$sim_ac_doxygen_our_version"; then
    AC_MSG_WARN(You are not using Doxygen version $sim_ac_doxygen_our_version)
  fi

  AC_PATH_PROG(sim_ac_perl_exe, perl, false, $PATH)
  if test x"$sim_ac_perl_exe" = xfalse; then
    AC_MSG_WARN(Could not find the Perl executable)
  fi
fi


# *******************************************************************
# * Check compiler features, bugs, etc.
# *******************************************************************

SIM_AC_COMPILE_DEBUG(
  [CPPFLAGS="$CPPFLAGS -DCOIN_DEBUG=1"],
  [CPPFLAGS="$CPPFLAGS -DCOIN_DEBUG=0"])

SIM_AC_DEBUGSYMBOLS
SIM_AC_RTTI_SUPPORT
SIM_EXCEPTION_HANDLING
SIM_PROFILING_SUPPORT
SIM_COMPILER_WARNINGS

#  Yep, this is important in case we want to add code to make
#  the API interface "Open Inventor strict", meaning the user must
#  use the exact same include files as under "real" Open Inventor.
#  We would then need to know that we are actually allowed to include
#  any file during internal build.
#
#  The COIN_INTERNAL define is also in use to detect
# "inefficient including"  internally.
CPPFLAGS="$CPPFLAGS -DCOIN_INTERNAL"


# Try to find snprintf() and vsnprintf() on the system.
SIM_CHECK_NPRINTF

SIM_AC_CHECK_MACRO_QUOTE( ,
  AC_MSG_ERROR(couldn't figure out how to quote strings in macros))
if test x"$sim_ac_quote_hash" = xyes; then
  AC_DEFINE(HAVE_HASH_QUOTING)
else
  if test x"$sim_ac_quote_apostrophes" = xyes; then
    AC_DEFINE(HAVE_APOSTROPHES_QUOTING)
  fi
fi


# *******************************************************************
# * Test to see if dynamic linking through the dl library is
# * available.
# *******************************************************************

SIM_AC_CHECK_DL(
  AC_DEFINE_UNQUOTED(HAVE_DL_LIB)
  COIN_EXTRA_CPPFLAGS="$COIN_EXTRA_CPPFLAGS $sim_ac_dl_cppflags"
  COIN_EXTRA_LDFLAGS="$COIN_EXTRA_LDFLAGS $sim_ac_dl_ldflags"
  COIN_EXTRA_LIBS="$sim_ac_dl_libs $COIN_EXTRA_LIBS"
)


# *******************************************************************
# * Set us up for using the simage library (if wanted, and if
# * available).
# *******************************************************************

AC_ARG_ENABLE([dl-simage],
  AC_HELP_STRING([--enable-dl-simage],
                 [use runtime dynamic linking for libsimage if possible [[default=yes]]]),
  [case "${enableval}" in
    yes | no) enable_dl_simage=${enableval} ;;
    *) AC_MSG_ERROR(bad value "${enableval}" for --enable-dl-simage) ;;
  esac],
  [enable_dl_simage=yes])

if test x"$sim_ac_dl_avail" = xyes -a x"$enable_dl_simage" = xyes; then
  AC_DEFINE_UNQUOTED(SIMAGE_RUNTIME_LINKING)
else
  SIM_AC_HAVE_SIMAGE_IFELSE(
    AC_DEFINE(HAVE_LIBSIMAGE)
    CPPFLAGS="$CPPFLAGS $sim_ac_simage_cppflags"
    LDFLAGS="$LDFLAGS $sim_ac_simage_ldflags"
    LIBS="$sim_ac_simage_libs $LIBS"
    COIN_EXTRA_CPPFLAGS="$COIN_EXTRA_CPPFLAGS $sim_ac_simage_cppflags"
    COIN_EXTRA_LDFLAGS="$COIN_EXTRA_LDFLAGS $sim_ac_simage_ldflags"
    COIN_EXTRA_LIBS="$sim_ac_simage_libs $COIN_EXTRA_LIBS"
  , if $sim_ac_simage_desired; then AC_MSG_WARN(simage development system not found); fi)
fi


# *******************************************************************
# * Mathlib stuff.
# *******************************************************************

SIM_AC_MATHLIB_READY_IFELSE(,[
  SIM_AC_CHECK_MATHLIB(COIN_EXTRA_LIBS="$COIN_EXTRA_LIBS $sim_ac_libm",
                       AC_MSG_ERROR(could not find a way to use math library))
])

AC_CACHE_CHECK([whether single-precision math functions are available],
  sim_cv_func_singleprec_avail,
  [AC_TRY_LINK([#include <math.h>],
               [(void)sqrtf(1.0f);
                (void)powf(1.0f, 1.0f);
                (void)cosf(1.0f);
                (void)sinf(1.0f);
                (void)tanf(1.0f);
                (void)acosf(1.0f);
                (void)asinf(1.0f);
                (void)atanf(1.0f);
                (void)atan2f(1.0f, 1.0f);],
               sim_cv_func_singleprec_avail=true,
               sim_cv_func_singleprec_avail=false)])

$sim_cv_func_singleprec_avail && AC_DEFINE(HAVE_SINGLEPRECISION_MATH)

# *******************************************************************
# * Handle the detection and inclusion of X11 libraries.
# *******************************************************************

SIM_AC_CHECK_X11([COIN_EXTRA_CPPFLAGS="$COIN_EXTRA_CPPFLAGS $sim_ac_x11_cppflags"
                  COIN_EXTRA_LDFLAGS="$COIN_EXTRA_LDFLAGS $sim_ac_x11_ldflags"
                  COIN_EXTRA_LIBS="$sim_ac_x11_libs $COIN_EXTRA_LIBS"])

if test x"$sim_ac_x11_avail" = xyes; then
  #  If the X11 shared memory extension is available, include it as
  #  the Mesa library has probably been linked against it.
  SIM_AC_CHECK_X11SHMEM(COIN_EXTRA_LIBS="$sim_ac_x11shmem_libs $COIN_EXTRA_LIBS")
fi


# *******************************************************************
# * Test for installation of Mesa or OpenGL development system.
# *******************************************************************

SIM_AC_CHECK_OPENGL([AC_DEFINE(HAVE_OPENGL)
                    COIN_EXTRA_CPPFLAGS="$COIN_EXTRA_CPPFLAGS $sim_ac_gl_cppflags"
                    COIN_EXTRA_LDFLAGS="$COIN_EXTRA_LDFLAGS $sim_ac_gl_ldflags"
                    COIN_EXTRA_LIBS="$sim_ac_gl_libs $COIN_EXTRA_LIBS"])

if test x"$sim_ac_gl_avail" = xyes; then

  # *******************************************************************
  # ** Check if GLX is available.
  # *******************************************************************

  AC_CACHE_CHECK([whether GLX is available],
    sim_cv_func_glx_avail,
    [AC_TRY_LINK([#include <GL/glx.h>],
                 [(void)glXChooseVisual(0L, 0, 0L);],
                 sim_cv_func_glx_avail=yes,
                 sim_cv_func_glx_avail=no)])

  if test x"$sim_cv_func_glx_avail" = xyes; then
    AC_DEFINE(HAVE_GLX)
  fi


  # *******************************************************************
  # ** Check if GLU should be loaded and linked at runtime (to avoid
  # ** install dependency libCoin -> libGLU).
  # *******************************************************************
  AC_ARG_ENABLE([dl-glu],
    AC_HELP_STRING([--enable-dl-glu],
                   [use runtime dynamic linking for GLU if possible [[default=yes]]]),
    [case "${enableval}" in
      yes | no) enable_dl_glu=${enableval} ;;
      *) AC_MSG_ERROR(bad value "${enableval}" for --enable-dl-glu) ;;
    esac],
    [enable_dl_glu=yes])

  if test x"$sim_ac_dl_avail" = xyes -a x"$enable_dl_glu" = xyes; then
    # See if GLU is part of GL library (this is the case on BeOS, for
    # instance) before setting us up for runtime linking.
    SIM_AC_GLU_READY_IFELSE(
      AC_DEFINE(HAVE_GLU),
      AC_DEFINE_UNQUOTED(GLU_RUNTIME_LINKING)
    )
  else
    # *******************************************************************
    # ** Check if GLU headers and lib is available on build host.
    # *******************************************************************
    SIM_AC_CHECK_GLU([
      AC_DEFINE(HAVE_GLU)
      COIN_EXTRA_CPPFLAGS="$COIN_EXTRA_CPPFLAGS $sim_ac_glu_cppflags"
      COIN_EXTRA_LDFLAGS="$COIN_EXTRA_LDFLAGS $sim_ac_glu_ldflags"
      COIN_EXTRA_LIBS="$sim_ac_glu_libs $COIN_EXTRA_LIBS"
    ])
  fi


else # couldn't link with OpenGL
  # Don't stop the configure process if we seem to be configuring to build
  # the documentation (I don't care to install an OpenGL development system
  # on our webserver). 20000703 mortene.
  if test x"$want_html" = xno -a x"$want_man" = xno; then
    # FIXME: should be able to handle systems where OpenGL is not available,
    # as it would be handy for making e.g. import/export-only versions of the
    # library. 20000123 mortene.
    AC_MSG_ERROR(needs an OpenGL-compatible development system installed to compile Coin)
  else
    AC_MSG_WARN(needs an OpenGL-compatible development system installed to compile Coin)
  fi

fi

# *******************************************************************
# * Provide this nasty hack to help building Coin on platforms
# * where one can bump into the "Arg list too long" problem
# * (IBM AIX, SGI IRIX 6.2 and IRIX 6.5 with standard settings are
# * known to fail).
# *******************************************************************

AC_ARG_ENABLE(compact,
  AC_HELP_STRING([--enable-compact], [enable hack for compact compilation [[default=no]]]),
  [case "${enableval}" in
    yes) enable_compact=yes ;;
    no)  enable_compact=no ;;
    *) AC_MSG_ERROR(bad value "${enableval}" for --enable-compact) ;;
  esac],
  enable_compact=no)

AM_CONDITIONAL(HACKING_COMPACT_BUILD, test x"$enable_compact" = x"yes")



# *******************************************************************
# * Enable/disable compilation with the "incremental linking through
# * the use of dynamic libraries"-hack.
# *******************************************************************

AC_ARG_ENABLE(hacking,
  AC_HELP_STRING([--enable-hacking], [enable hacks for quick turn-around cycles during development [[default=no]]]),
  [case "${enableval}" in
    yes) enable_hacking=yes ;;
    no)  enable_hacking=no ;;
    *) AC_MSG_ERROR(bad value "${enableval}" for --enable-hacking) ;;
  esac],
  enable_hacking=no)

AM_CONDITIONAL(HACKING_DYNAMIC_MODULES, test x"$enable_hacking" = x"yes")

COIN_HACKING_LIBDIRS=
if test x"$enable_hacking" = x"yes"; then
  COIN_HACKING_LIBDIRS="-L${coin_build_dir}/src/base/.libs -L${coin_build_dir}/src/VRMLnodes/.libs -L${coin_build_dir}/src/actions/.libs -L${coin_build_dir}/src/bundles/.libs -L${coin_build_dir}/src/caches/.libs -L${coin_build_dir}/src/details/.libs -L${coin_build_dir}/src/draggers/.libs -L${coin_build_dir}/src/elements/.libs -L${coin_build_dir}/src/engines/.libs -L${coin_build_dir}/src/errors/.libs -L${coin_build_dir}/src/events/.libs -L${coin_build_dir}/src/fields/.libs -L${coin_build_dir}/src/manips/.libs -L${coin_build_dir}/src/misc/.libs -L${coin_build_dir}/src/lists/.libs -L${coin_build_dir}/src/nodekits/.libs -L${coin_build_dir}/src/nodes/.libs -L${coin_build_dir}/src/projectors/.libs -L${coin_build_dir}/src/sensors/.libs"
  COIN_EXTRA_LIBS="-lbaseLINKHACK -lVRMLnodesLINKHACK -lactionsLINKHACK -lbundlesLINKHACK -lcachesLINKHACK -ldetailsLINKHACK -ldraggersLINKHACK -lelementsLINKHACK -lenginesLINKHACK -lerrorsLINKHACK -leventsLINKHACK -lfieldsLINKHACK -lmanipsLINKHACK -lmiscLINKHACK -llistsLINKHACK -lnodekitsLINKHACK -lnodesLINKHACK -lprojectorsLINKHACK -lsensorsLINKHACK $COIN_EXTRA_LIBS"
fi

AC_SUBST(COIN_HACKING_LIBDIRS)


# *******************************************************************
# * For exposing various build, src and installation paths to
# * misc configuration files under the $top_src_dir/build/ directory.
# *******************************************************************

SIM_EXPAND_DIR_VARS

coin_src_dir=`cd $srcdir; pwd`

AC_SUBST(coin_build_dir)
AC_SUBST(coin_src_dir)


# **************************************************************************
# Remove redundant options from certain option lists.

SIM_AC_UNIQIFY_LIST(COIN_EXTRA_CPPFLAGS, -I$includedir $COIN_EXTRA_CPPFLAGS)
SIM_AC_UNIQIFY_LIST(COIN_EXTRA_LDFLAGS, -L$libdir $COIN_EXTRA_LDFLAGS)
SIM_AC_UNIQIFY_LIST(COIN_EXTRA_LIBS, $COIN_EXTRA_LIBS)
SIM_AC_UNIQIFY_LIST(CPPFLAGS, $CPPFLAGS)
SIM_AC_UNIQIFY_LIST(LDFLAGS, $LDFLAGS)
SIM_AC_UNIQIFY_LIST(LIBS, $LIBS)

# **************************************************************************
# Remaining setup based on platform.

if $BUILD_WITH_MSVC; then
  CPPFLAGS="-DCOIN_MAKE_DLL $CPPFLAGS"

  # We use a version suffix on the .dll-file, so several incompatible
  # (major) versions can be installed on a system.
  #
  # BTW, when linking DLLs, the 3rd-party .lib files will be
  # linked into the .dll file. I believe it is still advisable to
  # list all libs used upon `coin-config --libs`, as we can then
  # also use them from "parent" code (remember that their interfaces
  # is not exposed from the DLL) without any fuss.
  COIN_EXTRA_CPPFLAGS="$COIN_EXTRA_CPPFLAGS -DCOIN_DLL"
  COIN_EXTRA_LIBS="-lcoin$COIN_MAJOR_VERSION $COIN_EXTRA_LIBS"

else
  COIN_EXTRA_LIBS="-lCoin $COIN_EXTRA_LIBS"

  # For the build/coin.spec RPM specification file.
  SIM_AC_ISO8601_DATE(coin_configure_date)
  AC_SUBST(coin_configure_date)
fi

# **************************************************************************

AC_OUTPUT([
        coin-config
        Makefile
        include/Makefile
        include/Inventor/Makefile
        include/Inventor/lock/Makefile
        data/Makefile
        data/draggerDefaults/Makefile
        src/Makefile
        src/base/Makefile
        src/VRMLnodes/Makefile
        src/actions/Makefile
        src/bundles/Makefile
        src/caches/Makefile
        src/details/Makefile
        src/draggers/Makefile
        src/elements/Makefile
        src/engines/Makefile
        src/errors/Makefile
        src/events/Makefile
        src/fields/Makefile
        src/manips/Makefile
        src/misc/Makefile
        src/lists/Makefile
        src/nodekits/Makefile
        src/nodes/Makefile
        src/projectors/Makefile
        src/sensors/Makefile
        src/system/Makefile
        build/Makefile
        build/coin.spec
        docs/coin.doxygen
], [
	chmod a+x coin-config
])


# *******************************************************************
# * Platform-specific stuff.
# *******************************************************************

ac_coin_unknown_platform=yes

case "$host_os" in
  irix6.2)
    if test "$CXX" = CC; then ac_coin_unknown_platform=no; fi
    ;;
  irix6.5)
    if test "$CXX" = CC; then ac_coin_unknown_platform=no; fi
    ;;
  aix*)
    if test "$CXX" = xlC; then ac_coin_unknown_platform=no; fi
    ;;
  hpux10.20)
    if test "$CXX" = aCC; then ac_coin_unknown_platform=no; fi
    ;;
  linux-gnu)
    case "$host_cpu" in
      i?86)
        ac_coin_unknown_platform=no ;;
    esac
    ;;
  cygwin*)
    case "$CXX" in
      *msvccc) ac_coin_unknown_platform=no ;;
    esac
    ;;
  beos)
    case "$host_cpu" in
      i?86)
        if test "$CXX" = c++; then ac_coin_unknown_platform=no; fi
        ;;
    esac
    ;;
esac

if test $ac_coin_unknown_platform = yes; then
  echo
  echo "************************* WARNING ****************************"
  echo "*"
  echo "* We have not tested Coin on the $host_os $host_cpu"
  echo "* platform with the $CXX C++ compiler. Please report"
  echo "* back to us at <coin-support@sim.no> how it works out."
  echo "*"
  echo "**************************************************************"
  echo
fi


case "$host_os" in
  irix*)
    echo ""
    echo " Detected SGI IRIX. There are some hints regarding this platform"
    echo " in the file "
    echo ""
    echo "           ${srcdir}/README.IRIX"
    echo ""
    echo " Please take a look if this is your first time building on IRIX."
    echo ;;

  aix*)
    echo ""
    echo " Detected IBM AIX. There are some hints regarding this platform"
    echo " in the file "
    echo ""
    echo "           ${srcdir}/README.AIX"
    echo ""
    echo " Please take a look if this is your first time building on AIX."
    echo ;;
esac

echo ""
echo "Now, run 'make install' to build and install Coin."
