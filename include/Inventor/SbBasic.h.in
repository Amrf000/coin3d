/**************************************************************************\
 *
 *  This file is part of the Coin 3D visualization library.
 *  Copyright (C) 1998-2000 by Systems in Motion. All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public License
 *  version 2.1 as published by the Free Software Foundation. See the
 *  file LICENSE.LGPL at the root directory of the distribution for
 *  more details.
 *
 *  If you want to use Coin for applications not compatible with the
 *  LGPL, please contact SIM to aquire a Professional Edition license.
 *
 *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY
 *  http://www.sim.no support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
\**************************************************************************/

/*
  NOTE: SbBasic.h is automatically generated from
  SbBasic.h.in.  _Don't_ edit SbBasic.h.

  19990913 mortene.
*/

#ifndef COIN_SBBASIC_H
#define COIN_SBBASIC_H

/* *********************************************************************** */

/*!
  \defgroup base Base classes
 */
/*!
  \defgroup general General classes
*/
/*!
  \defgroup events Event classes
*/
/*!
  \defgroup projectors Projector classes
*/
/*!
  \defgroup sensors Sensor classes
*/
/*!
  \defgroup fields Field classes
*/
/*!
  \defgroup nodes Nodes
*/
/*!
  \defgroup nodekits Node Kits
*/
/*!
  \defgroup actions Actions
*/
/*!
  \defgroup vrml2 VRML 2.0
*/
/*!
  \defgroup details Detail classes
*/
/*!
  \defgroup draggers Draggers
*/
/*!
  \defgroup manips Manipulators
*/
/*!
  \defgroup engines Engine classes
*/



/*!
  \class SbBool SbBasic.h Inventor/SbBasic.h
  \brief SbBool is a compiler portable boolean type.
  \ingroup base

  SbBool is meant to be a "compiler portable" way of defining a
  boolean type, since there are older compilers out there which don't
  support the ISO-standard C++ \c bool keyword.

  SbBool is not really a class, just a \c typedef.
*/

typedef int SbBool;

#ifndef FALSE
#define FALSE 0
#endif /* !FALSE */
#ifndef TRUE
#define TRUE  1
#endif /* !TRUE */

/* Include these for Open Inventor compatibility reasons (they are not
 * actually used in Coin.)
 */
#define SoEXTENDER
#define SoINTERNAL

/* Include this to 1) be compatible with Open Inventor's SbBasic.h, 2)
 * provide a way for application programmers to get hold of the type
 * definitions without explicitly including inttypes.h.
 *
 * The latter point is important because the inttypes.h file in
 * Inventor is placed _below_ the Inventor/ directory in the header
 * files hierarchy. This means it could easily conflict with the
 * inttypes.h file installed as part of the C library on many systems
 * (like Linux/glibc, for instance).
 */
#include <Inventor/system/inttypes.h>

/* Internal note for Coin developers: in other sourcefiles in Coin, we
 * depend on math.h being included in SbBasic.h. It is done this way
 * to always make sure we have the M_* symbols available under MSWin
 * (see below). So don't remove the following line unless you know
 * very well what you are doing.
 */
#include <math.h>

/* Define misc values if they are not available from math.h. UNIX
 * systems typically have these defines, but MSWindows systems don't.
 */
#ifndef M_E
#define M_E 2.7182818284590452354
#endif /* !M_E */
#ifndef M_LOG2E
#define M_LOG2E 1.4426950408889634074
#endif /* !M_LOG2E */
#ifndef M_LOG10E
#define M_LOG10E 0.43429448190325182765
#endif /* !M_LOG10E */
#ifndef M_LN2
#define M_LN2 0.69314718055994530942
#endif /* !M_LN2 */
#ifndef M_LN10
#define M_LN10 2.30258509299404568402
#endif /* !M_LN10 */
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif /* !M_PI */
#ifndef M_TWOPI
#define M_TWOPI (M_PI * 2.0)
#endif /* !M_TWOPI */
#ifndef M_PI_2
#define M_PI_2 1.57079632679489661923
#endif /* !M_PI_2 */
#ifndef M_PI_4
#define M_PI_4 0.78539816339744830962
#endif /* !M_PI_4 */
#ifndef M_3PI_4
#define M_3PI_4 2.3561944901923448370E0
#endif /* !M_3PI_4 */
#ifndef M_SQRTPI
#define M_SQRTPI 1.77245385090551602792981
#endif /* !M_SQRTPI */
#ifndef M_1_PI
#define M_1_PI 0.31830988618379067154
#endif /* !M_1_PI */
#ifndef M_2_PI
#define M_2_PI 0.63661977236758134308
#endif /* !M_2_PI */
#ifndef M_2_SQRTPI
#define M_2_SQRTPI 1.12837916709551257390
#endif /* !M_2_SQRTPI */
#ifndef M_SQRT2
#define M_SQRT2 1.41421356237309504880
#endif /* !M_SQRT2 */
#ifndef M_SQRT1_2
#define M_SQRT1_2 0.70710678118654752440
#endif /* !M_SQRT1_2 */
#ifndef M_LN2LO
#define M_LN2LO 1.9082149292705877000E-10
#endif /* !M_LN2LO */
#ifndef M_LN2HI
#define M_LN2HI 6.9314718036912381649E-1
#endif /* !M_LN2HI */
#ifndef M_SQRT3
#define M_SQRT3 1.73205080756887719000
#endif /* !M_SQRT3 */
#ifndef M_IVLN10
#define M_IVLN10 0.43429448190325182765 /* 1 / log(10) */
#endif /* !M_IVLN10 */
#ifndef M_LOG2_E
#define M_LOG2_E 0.693147180559945309417
#endif /* !M_LOG2_E */
#ifndef M_INVLN2
#define M_INVLN2 1.4426950408889633870E0 /* 1 / log(2) */
#endif /* !M_INVLN2 */

/* This define is set by the configure script if singleprecision math
   functions are available from the C library API headers. */
#undef HAVE_SINGLEPRECISION_MATH

#ifndef HAVE_SINGLEPRECISION_MATH
/* If singleprecision math functions are missing, define them to their
   doubleprecision counterparts. This is done to be consistent with
   SbBasic.h in Open Inventor (application programmers might rely on
   the float-versions being set up from the Inventor SbBasic.h). */
#define cosf cos
#define sinf sin
#define tanf tan
#define powf pow
#define sqrtf sqrt
#define acosf acos
#define asinf asin
#define atanf atan
#define atan2f atan2
#endif /* HAVE_SINGLEPRECISION_MATH */


/* Some useful inline template functions (instead of macros):
 *   SbAbs(Val)              - returns absolute value
 *   SbMin(Val1, Val2)       - returns minimum value
 *   SbMax(Val1, Val2)       - returns maximum value
 *   SbClamp(Val, Min, Max)  - returns clamped value
 *   SbSwap(Val1, Val2)      - swaps the two values (no return value)
 *   SbSqr(val)              - returns (val)²
 *
 * FIXME: write Doxygen doc for these methods. 19990425 mortene.
 */

#ifdef __cplusplus

template <class Type>
inline Type SbAbs( Type Val ) {
  return (Val < 0) ? 0 - Val : Val;
}

template <class Type>
inline Type SbMax( const Type A, const Type B ) {
  return (A < B) ? B : A;
}

template <class Type>
inline Type SbMin( const Type A, const Type B ) {
  return (A < B) ? A : B;
}

template <class Type>
inline Type SbClamp( const Type Val, const Type Min, const Type Max ) {
  return (Val < Min) ? Min : (Val > Max) ? Max : Val;
}

template <class Type>
inline void SbSwap( Type & A, Type & B ) {
  Type T; T = A; A = B; B = T;
}

template <class Type>
inline Type SbSqr(const Type val) {
  return val * val;
}

#endif /* __cplusplus */

/* *********************************************************************** */

/* SO__QUOTE(str)        - use the preprocessor to quote a string.
 * SO__CONCAT(str1,str2) - use the preprocessor to concatenate two strings.
 */

/* The following two #undefs will be updated to either a #define or
   commented out when running ``configure'' -- according to compiler
   characteristics. Most compilers should have "hash quoting" as it is
   part of the ANSI standard. */
#undef HAVE_HASH_QUOTING
#undef HAVE_APOSTROPHES_QUOTING


#if HAVE_HASH_QUOTING
#define SO__QUOTE(str)           #str
#define SO__CONCAT(str1, str2)   str1##str2
#elif HAVE_APOSTROPHES_QUOTING
#define SO__QUOTE(str)           "str"
#define SO__CONCAT(str1, str2)   str1/**/str2
#else
#error No valid way to do macro quoting!
#endif

/* *********************************************************************** */

/* Enable to generate COIN.DLL (under Win32). */
#ifdef COIN_MAKE_DLL
#define COIN_DLL_EXPORT __declspec(dllexport)
#endif /* !COIN_MAKE_DLL */

/* Empty define to avoid errors when _not_ compiling as a DLL. */
#ifndef COIN_DLL_EXPORT
#define COIN_DLL_EXPORT
#endif /* !COIN_DLL_EXPORT */

/* *********************************************************************** */

/* A unique identifier to recognize whether or not we're running under
 * Systems in Motion's Coin library.
 */
#define __COIN__

/* These are available for adding or omitting features based on Coin
 * version numbers in "client" sources. NB: they are automatically
 * synchronized with the settings in configure.in when configure is
 * run. The #ifndefs are necessary because during development, these
 * are also defined in the config.h file generated by configure.
 */
#if !defined(COIN_MAJOR_VERSION)
#undef COIN_MAJOR_VERSION
#endif /* !COIN_MAJOR_VERSION */
#if !defined(COIN_MINOR_VERSION)
#undef COIN_MINOR_VERSION
#endif /* !COIN_MINOR_VERSION */
#if !defined(COIN_MICRO_VERSION)
#undef COIN_MICRO_VERSION
#endif /* !COIN_MICRO_VERSION */
#if !defined(COIN_VERSION)
#undef COIN_VERSION
#endif /* !COIN_VERSION */

#endif /* !COIN_SBBASIC_H */
