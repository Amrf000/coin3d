/**************************************************************************\
 *
 *  Copyright (C) 1998-2000 by Systems in Motion.  All rights reserved.
 *
 *  This file is part of the Coin library.
 *
 *  This file may be distributed under the terms of the Q Public License
 *  as defined by Troll Tech AS of Norway and appearing in the file
 *  LICENSE.QPL included in the packaging of this file.
 *
 *  If you want to use Coin in applications not covered by licenses
 *  compatible with the QPL, you can contact SIM to aquire a
 *  Professional Edition license for Coin.
 *
 *  Systems in Motion AS, Prof. Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ sales@sim.no Voice: +47 22114160 Fax: +47 67172912
 *
\**************************************************************************/

/*
  NOTE: SbBasic.h is automatically generated from
  SbBasic.h.in.  _Don't_ edit SbBasic.h.

  19990913 mortene.
*/

#ifndef COIN_SBBASIC_H
#define COIN_SBBASIC_H

/* *********************************************************************** */

/*!
  \defgroup base Base classes
 */
/*!
  \defgroup general General classes
*/
/*!
  \defgroup events Event classes
*/
/*!
  \defgroup projectors Projector classes
*/
/*!
  \defgroup sensors Sensor classes
*/
/*!
  \defgroup fields Field classes
*/
/*!
  \defgroup nodes Nodes
*/
/*!
  \defgroup nodekits Node Kits
*/
/*!
  \defgroup actions Actions
*/
/*!
  \defgroup vrml2 VRML 2.0
*/
/*!
  \defgroup details Detail classes
*/
/*!
  \defgroup draggers Draggers
*/
/*!
  \defgroup manips Manipulators
*/
/*!
  \defgroup engines Engine classes
*/



/*!
  \class SbBool SbBasic.h Inventor/SbBasic.h
  \brief SbBool is a compiler portable boolean type.
  \ingroup base

  SbBool is meant to be a "compiler portable" way of defining a
  boolean type, since there are older compilers out there which don't
  support the ISO-standard C++ \c bool keyword.

  SbBool is not really a class, just a \c typedef.
*/

typedef int SbBool;

#ifndef FALSE
#define FALSE 0
#endif /* !FALSE */
#ifndef TRUE
#define TRUE  1
#endif /* !TRUE */

#include <math.h>

/* Define the value for M_PI if it is not available from math.h. UNIX
 * systems typically have this defined, but MSWindows systems don't.
 */
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif /* !M_PI */


/* Some useful inline template functions (instead of macros):
 *   SbAbs(Val)              - returns absolute value
 *   SbMin(Val1, Val2)       - returns minimum value
 *   SbMax(Val1, Val2)       - returns maximum value
 *   SbClamp(Val, Min, Max)  - returns clamped value
 *   SbSwap(Val1, Val2)      - swaps the two values (no return value)
 *   SbSqr(val)              - returns (val)²
 *
 * FIXME: write Doxygen doc for these methods. 19990425 mortene.
 */

#ifdef __cplusplus

template <class Type>
inline Type SbAbs( Type Val ) {
  return (Val < 0) ? 0 - Val : Val;
}

template <class Type>
inline Type SbMax( const Type A, const Type B ) {
  return (A < B) ? B : A;
}

template <class Type>
inline Type SbMin( const Type A, const Type B ) {
  return (A < B) ? A : B;
}

template <class Type>
inline Type SbClamp( const Type Val, const Type Min, const Type Max ) {
  return (Val < Min) ? Min : (Val > Max) ? Max : Val;
}

template <class Type>
inline void SbSwap( Type & A, Type & B ) {
  Type T; T = A; A = B; B = T;
}

template <class Type>
inline Type SbSqr(const Type val) {
  return val * val;
}

#endif /* __cplusplus */

/* *********************************************************************** */

/* SO__QUOTE(str)        - use the preprocessor to quote a string.
 * SO__CONCAT(str1,str2) - use the preprocessor to concatenate two strings.
 */

/* The following two #undefs will be updated to either a #define or
   commented out when running ``configure'' -- according to compiler
   characteristics. Most compilers should have "hash quoting" as it is
   part of the ANSI standard. */
#undef HAVE_HASH_QUOTING
#undef HAVE_APOSTROPHES_QUOTING


#if HAVE_HASH_QUOTING
#define SO__QUOTE(str)           #str
#define SO__CONCAT(str1, str2)   str1##str2
#elif HAVE_APOSTROPHES_QUOTING
#define SO__QUOTE(str)           "str"
#define SO__CONCAT(str1, str2)   str1/**/str2
#else
#error No valid way to do macro quoting!
#endif

/* *********************************************************************** */

/* A unique identifier to recognize whether or not we're running under
 * Systems in Motion's Coin library.
 */
#define __COIN__

/* These are available for adding or omitting features based on Coin
 * version numbers in "client" sources. NB: they are automatically
 * synchronized with the settings in configure.in when configure is
 * run. The #ifndefs are necessary because during development, these
 * are also defined in the config.h file generated by configure.
 */
#if !defined(COIN_MAJOR_VERSION)
#undef COIN_MAJOR_VERSION
#endif /* !COIN_MAJOR_VERSION */
#if !defined(COIN_MINOR_VERSION)
#undef COIN_MINOR_VERSION
#endif /* !COIN_MINOR_VERSION */
#if !defined(COIN_MICRO_VERSION)
#undef COIN_MICRO_VERSION
#endif /* !COIN_MICRO_VERSION */
#if !defined(COIN_VERSION)
#undef COIN_VERSION
#endif /* !COIN_VERSION */

#endif /* !COIN_SBBASIC_H */
