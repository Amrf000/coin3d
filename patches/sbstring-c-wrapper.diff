This patch rewrites the SbString class to be a wrapper around a
pure C implementation of the same functionality.

Installing it changes the Coin ABI heavily - all dependencies
has to be recompiled.

You have to change the build setup yourself - I have other changes
in mine that makes producing good diffs for this a hassle.  Fix
these files if you apply this patch.

  src/base/all.cpp
  src/base/Makefile.am
  include/Inventor/C/base/Makefile.am

The patch also extends the SbString class with the following
functions:

  int compareSubString(const char * text, int offset = 0);
  void apply(char (*func)(char input));

Former can optimize some code (see "So"-prefix comparison in
SoType::fromName() for an example of lots of instantiations for
some really trivial stuff), and the latter is a wishlist
item from Peder.

The SbString documentation is not part of this patch - since
SbString.cpp won't any longer be compiled the doc blocks should be
extracted and put in /*! \fn ... */ blocks at the end of string.c
or something.

Anyways, the implementation seems to be quite bugfree now.

  Lars J

Index: include/Inventor/SbString.h
===================================================================
RCS file: /export/cvsroot/Coin/include/Inventor/SbString.h,v
retrieving revision 1.19
diff -u -r1.19 SbString.h
--- include/Inventor/SbString.h	23 Nov 2001 14:25:46 -0000	1.19
+++ include/Inventor/SbString.h	28 Jan 2002 11:29:25 -0000
@@ -25,65 +25,110 @@
 \**************************************************************************/
 
 #include <Inventor/system/inttypes.h>
-#include <Inventor/SbBasic.h>
+#include <Inventor/C/base/string.h>
 
-#include <stdio.h>
 #include <stdarg.h>
-
-#define SB_STRING_STATIC_STORAGE_SIZE 128
-
+#include <stdlib.h>
 
 class COIN_DLL_API SbString {
 public:
-  SbString(void);
-  SbString(const char * str);
-  SbString(const char * str, int start, int end);
-  SbString(const SbString & str);
-  SbString(const int digits);
-  ~SbString();
-
-  uint32_t hash(void);
-  int getLength(void) const;
-  void makeEmpty(SbBool freeold = TRUE);
-  const char * getString(void) const;
-  SbString getSubString(int startidx, int endidx = -1) const;
-  void deleteSubString(int startidx, int endidx = -1);
-
-  void addIntString(const int value);
-
-  char operator [](int index) const;
-  SbString & operator = (const char * str);
-  SbString & operator = (const SbString & str);
-  SbString & operator += (const char * str);
-  SbString & operator += (const SbString & str);
-  int operator ! (void) const;
-  friend COIN_DLL_API int operator == (const SbString & str, const char * s);
-  friend COIN_DLL_API int operator == (const char * s, const SbString & str);
-  friend COIN_DLL_API int operator == (const SbString & str1, const SbString & str2);
-  friend COIN_DLL_API int operator != (const SbString & str, const char * s);
-  friend COIN_DLL_API int operator != (const char * s, const SbString & str);
-  friend COIN_DLL_API int operator != (const SbString & str1, const SbString & str2);
-  static uint32_t hash(const char * s);
-
-  SbString & operator += (const char c);
-  SbString & sprintf(const char * formatstr, ...);
-  SbString & vsprintf(const char * formatstr, va_list args);
-
-  void print(FILE * file = stdout) const;
+  SbString(void) { cc_string_struct_init(&this->string); }
+  SbString(const char * str)
+    { cc_string_struct_init(&this->string);
+      cc_string_set_text(&this->string, str); }
+  SbString(const char * str, int start, int end)
+    { cc_string_struct_init(&this->string);
+      cc_string_set_subtext(&this->string, str, start, end); }
+  SbString(const SbString & str)
+    { cc_string_struct_init(&this->string);
+      cc_string_set_string(&this->string, &str.string); }
+  SbString(const int digits)
+    { cc_string_struct_init(&this->string);
+      cc_string_set_integer(&this->string, digits); }
+  ~SbString(void) { cc_string_struct_clean(&this->string); }
+
+  uint32_t hash(void) { return cc_string_hash(&this->string); }
+  static uint32_t hash(const char * s) { return cc_string_hash_text(s); }
+
+  int getLength(void) const
+    { return cc_string_length(&this->string); }
+
+  void makeEmpty(SbBool freeold = TRUE)
+    { if ( freeold ) cc_string_clear(&this->string);
+      else cc_string_clear_no_free(&this->string); }
+
+  const char * getString(void) const
+    { return cc_string_get_text(&this->string); }
+
+  SbString getSubString(int startidx, int endidx = -1) const
+    { return SbString(cc_string_construct_subtext(this->string.pointer, startidx, endidx)); }
+  void deleteSubString(int startidx, int endidx = -1)
+    { cc_string_remove_substring(&this->string, startidx, endidx); }
+
+  void addIntString(const int value)
+    { cc_string_append_integer(&this->string, value); }
+
+  char operator [] (int index) const { return this->string.pointer[index]; }
+
+  SbString & operator = (const char * str)
+    { cc_string_set_text(&this->string, str); return *this; }
+  SbString & operator = (const SbString & str)
+    { cc_string_set_text(&this->string, str.string.pointer); return *this; }
+
+  SbString & operator += (const char * str)
+    { cc_string_append_text(&this->string, str); return *this; }
+  SbString & operator += (const SbString & str)
+    { cc_string_append_string(&this->string, &str.string); return *this; }
+  SbString & operator += (const char c)
+    { cc_string_append_char(&this->string, c); return *this; }
+
+  int operator ! (void) const { return ! cc_string_is(&this->string); }
+
+  int compareSubString(const char * text, int offset = 0) const
+    { return cc_string_compare_subtext(&this->string, text, offset); }
+
+  SbString & sprintf(const char * formatstr, ...)
+    { va_list args; va_start(args, formatstr);
+      cc_string_vsprintf(&this->string, formatstr, args);
+      va_end(args); return *this; }
+  SbString & vsprintf(const char * formatstr, va_list args)
+    { cc_string_vsprintf(&this->string, formatstr, args); return *this; }
+
+  void apply(char (*func)(char input))
+    { cc_string_apply(&this->string, func); }
+
+  friend int operator == (const SbString & str, const char * s);
+  friend int operator == (const char * s, const SbString & str);
+  friend int operator == (const SbString & str1, const SbString & str2);
+  friend int operator != (const SbString & str, const char * s);
+  friend int operator != (const char * s, const SbString & str);
+  friend int operator != (const SbString & str1, const SbString & str2);
+
+protected:
+  SbString(cc_string * internal_string)
+    { (void) memcpy(&this->string, internal_string, sizeof(cc_string));
+      if ( internal_string->pointer == internal_string->buffer )
+        this->string.pointer = this->string.buffer;
+      cc_string_struct_free(internal_string); }
 
 private:
-  char * sstring;
-  int storagesize;
-  char staticstorage[SB_STRING_STATIC_STORAGE_SIZE];
-  void expand(int additional);
+  struct cc_string string;
+
 };
 
-COIN_DLL_API int operator == (const SbString & str, const char * s);
-COIN_DLL_API int operator == (const char * s, const SbString & str);
-COIN_DLL_API int operator == (const SbString & str1, const SbString & str2);
-COIN_DLL_API int operator != (const SbString & str, const char * s);
-COIN_DLL_API int operator != (const char * s, const SbString & str);
-COIN_DLL_API int operator != (const SbString & str1, const SbString & str2);
+inline int operator == (const SbString & str, const char * s)
+  { return (cc_string_compare_text(str.string.pointer, s) == 0); }
+inline int operator == (const char * s, const SbString & str)
+  { return (cc_string_compare_text(s, str.string.pointer) == 0); }
+inline int operator == (const SbString & str1, const SbString & str2)
+  { return (cc_string_compare_text(str1.string.pointer, str2.string.pointer) == 0); }
+
+inline int operator != (const SbString & str, const char * s)
+  { return (cc_string_compare_text(str.string.pointer, s) != 0); }
+inline int operator != (const char * s, const SbString & str)
+  { return (cc_string_compare_text(s, str.string.pointer) != 0); }
+inline int operator != (const SbString & str1, const SbString & str2)
+  { return (cc_string_compare_text(str1.string.pointer, str2.string.pointer) != 0); }
 
 #ifndef COIN_INTERNAL
 // For Open Inventor compatibility.
