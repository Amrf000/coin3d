This patch adds some introspection to the So*FEnum field classes so you
can dynamically find out names and values that are understood.  It should
be totally safe to apply, even for Coin-1 for the next minor release if
we want to add this functionality.

This patch obsoletes top item in docs/api-wish-list.txt when applied.

  Lars J

Index: include/Inventor/fields/SoMFEnum.h
===================================================================
RCS file: /export/cvsroot/Coin/include/Inventor/fields/SoMFEnum.h,v
retrieving revision 1.20
diff -u -r1.20 SoMFEnum.h
--- include/Inventor/fields/SoMFEnum.h	26 Nov 2001 13:27:58 -0000	1.20
+++ include/Inventor/fields/SoMFEnum.h	22 Jan 2002 14:54:53 -0000
@@ -40,6 +40,9 @@
   void setEnums(const int num, const int * const values,
                 const SbName * const names);
 
+  int getNumEnums(void) const;
+  int getEnum(const int idx, SbName & name) const;
+
 protected:
   virtual SbBool findEnumValue(const SbName & name, int & value);
   virtual SbBool findEnumName(int value, const SbName * & name) const;
Index: include/Inventor/fields/SoSFEnum.h
===================================================================
RCS file: /export/cvsroot/Coin/include/Inventor/fields/SoSFEnum.h,v
retrieving revision 1.22
diff -u -r1.22 SoSFEnum.h
--- include/Inventor/fields/SoSFEnum.h	26 Nov 2001 13:27:58 -0000	1.22
+++ include/Inventor/fields/SoSFEnum.h	22 Jan 2002 14:54:53 -0000
@@ -39,6 +39,9 @@
   void setValue(const SbName name);
   void setEnums(const int num, const int * vals, const SbName * names);
 
+  int getNumEnums(void) const;
+  int getEnum(const int idx, SbName & name) const;
+
 protected:
   virtual SbBool findEnumValue(const SbName & name, int & val);
   virtual SbBool findEnumName(int value, const SbName * & name) const;
Index: src/fields/SoMFEnum.cpp
===================================================================
RCS file: /export/cvsroot/Coin/src/fields/SoMFEnum.cpp,v
retrieving revision 1.21
diff -u -r1.21 SoMFEnum.cpp
--- src/fields/SoMFEnum.cpp	19 Nov 2001 12:26:43 -0000	1.21
+++ src/fields/SoMFEnum.cpp	22 Jan 2002 14:54:53 -0000
@@ -246,3 +246,32 @@
   }
   return FALSE;
 }
+
+/*!
+  Returns the number of enum names the SoSFEnum object understands.
+
+  \since 2001-01-22
+*/
+int
+SoMFEnum::getNumEnums(void) const
+{
+  return this->numEnums;
+}
+
+/*!
+  Returns the value of the Nth enum this SoSFEnum object understands,
+  and mutates \a name to contain the Nth enum's name.
+
+  \since 2001-01-22
+*/
+int
+SoMFEnum::getEnum(const int idx, SbName & name) const
+{
+  if ( COIN_DEBUG && (idx < 0 || idx >= this->numEnums) ) {
+    SoDebugError::post("SoSFEnum::getEnum", "idx (%d) out of range", idx);
+    return -1;
+  }
+  name = this->enumNames[idx];
+  return this->enumValues[idx];
+}
+
Index: src/fields/SoSFEnum.cpp
===================================================================
RCS file: /export/cvsroot/Coin/src/fields/SoSFEnum.cpp,v
retrieving revision 1.24
diff -u -r1.24 SoSFEnum.cpp
--- src/fields/SoSFEnum.cpp	19 Nov 2001 12:26:43 -0000	1.24
+++ src/fields/SoSFEnum.cpp	22 Jan 2002 14:54:53 -0000
@@ -262,3 +262,32 @@
 #endif // COIN_DEBUG
   }
 }
+
+/*!
+  Returns the number of enum names the SoSFEnum object understands.
+
+  \since 2001-01-22
+*/
+int
+SoSFEnum::getNumEnums(void) const
+{
+  return this->numEnums;
+}
+
+/*!
+  Returns the value of the Nth enum this SoSFEnum object understands,
+  and mutates \a name to contain the Nth enum's name.
+
+  \since 2001-01-22
+*/
+int
+SoSFEnum::getEnum(const int idx, SbName & name) const
+{
+  if ( COIN_DEBUG && (idx < 0 || idx >= this->numEnums) ) {
+    SoDebugError::post("SoSFEnum::getEnum", "idx (%d) out of range", idx);
+    return -1;
+  }
+  name = this->enumNames[idx];
+  return this->enumValues[idx];
+}
+
