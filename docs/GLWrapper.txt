How to use OpenGL/GLX inside Coin
=================================

Creating portable OpenGL applications can be a complicated matter since 
you have to to both compile-time and run-time tests for OpenGL/GLX version,
and what extensions are available. In addition, you might not have an
entry point to the (extension) function in question on your build system.
GLWrapper is here not to relieve the application programmer for that burden.
GLWrapper can be found in src/misc/GLWrapper.*

NB! GLWrapper is at the moment a private component of Coin, which means 
that it is only available to internal Coin components.

Programmer's responsibilities
-----------------------------

o OpenGL calls that are part of OpenGL 1.0 can safely be used without any 
  kind of checking.

o Do _not_ use GLWrapper unless you are sure that you have a valid OpenGL 
  context. GLWrapper implicitly assumes that this is the case. In short, only
  use OpenGL functions inside an SoGLRenderAction.

o To get hold of a GLWrapper instance:
  const GLWrapper_t *glw = GLWrapper(SoGLCacheContextElement::get(state));
  or
  const GLWrapper_t *glw = GLWRAPPER_FROM_STATE(state);

  The last one can safely be used in any element's init().

o Always check that the capability you want to use is supported.
  There are two ways of doing this, but only the first one is
  supported at the moment (FIXME kintel 20011201):
  - Check that glw->glWhateverFunction is not NULL.
  - Query GLWrapper for a group of available calls through 
    int GLWrapper_queryCapability(GLWrapperCapability cap);

o GLWrapper has some functions for querying OpenGL/GLX version and
  extension availability. Usually you shouldn't need
  to use these unless you want to bypass GLWrapper or your function isn't
  supported by GLWrapper (in which case you should add it).

o SoGLCacheContextElement also has some functions for querying OpenGL 
  version and extension availability. These are public, so you can use
  them even in external code. However, use GLWrapper internally for 
  consistency.

What GLWrapper supplies
-----------------------

o GLWrapper supplies function pointer to OpenGL and GLX functions used in
  Coin that are _not_ part of OpenGL 1.0 and GLX 1.1.
  Note that GLWrapper supplies OpenGL extension functions as if they
  were standard functions (i.e. without the EXT suffix).

o GLWrapper supplies OpenGL enums in the same way as for OpenGL functions
  (the _EXT suffix is removed). Please use the GLWrapper enums as you're
  not guaranteed that extension enums are the same as standard enums.
  The enums are prepended with COIN_.

The following example accesses OpenGL 3D texturing. It works both on
OpenGL >= 1.2 and on OpenGL 1.1 with the GL_EXT_texture3D extension.

-----------------------------------------

const GLWrapper_t *glw = GLWrapper(SoGLCacheContextElement::get(state));
if (glw->glTexImage3D) {
  glTexImage3D(glw->COIN_GL_PROXY_TEXTURE_3D, 0, GL_RGBA, 
               64,64,64,0,
               GL_RGBA, GL_UNSIGNED_BYTE,
               NULL);
}
else {
  // Implement a proper fallback or error handling.
}
