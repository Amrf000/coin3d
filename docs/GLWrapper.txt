How to use OpenGL inside Coin
=============================

FIXME: It isn't very clean having these functions in SoGLCacheContextElement
       in the first place. Are there any other places we could move them?

OpenGL calls can only be used as long as there is a valid context.
This means that we can only use OpenGL inside an SoGLRenderAction.
The following static functions in SoGLCacheContextElement are useful:

// Returns a valid GLWrapper for the current context
GLWrapper getGLWrapper(SoState *state);
// Assigns/returns an ID for an extension string.
int getExtID(const char *str);
// Returns true if the extension identified by ID is 
// available for the current context.
SbBool extSupported(SoState *state, int extid);
// Returns the OpenGL version for the current context in the 
// major, minor and revision parameters
void getOpenGLVersion(SoState *state, int &major, int &minor, int &revision);
// Returns true if the OpenGL version for the current context at least
// matches the parameter values.
SbBool openGLVersionMatchesAtLeast(SoState *state, 
                                   int major, int minor, int revision);

OpenGL calls that are part of OpenGL 1.1 can safely be used without any 
kind of checking. Extensions to OpenGL 1.1 and functions or extensions in 
newer versions of OpenGL should be accessed using GLWrapper (Coin/src/misc).
Note that GLWrapper only supplies dynamic binding of functions. The programmer
needs to do all necessary run-time checks before calling a function through
GLWrapper. GLWrapper neither supplies the enums that might be necessary to
use certain extension and >1.1 functions. Therefore, always do #ifdef tests
to make sure that they are defined.

Example:


GLWrapper *glWrapper = SoGLCacheContextElement::getGLWrapper(state);
if (false) {
}
#ifdef GL_VERSION_1_2 // We need the enums
else if (GLWrapper()->versionMatchesAtLeast(1,2,0)) { // We have OpenGL 1.2
  glWrapper->glTexImage3D(GL_PROXY_TEXTURE_3D, 0, GL_RGBA, 
                          64,64,64,0,
                          GL_RGBA, GL_UNSIGNED_BYTE,
                          NULL);
}
#elif defined(GL_EXT_texture3D)  // We need the enums
else { // OpenGL 1.1, check for extensions
  int idExtTexture3D=SoGLCacheContextElement::getExtID("GL_EXT_texture3D");
  if (SoGLCacheContextElement::extSupported(state,idExtTexture3D)) {
    glWrapper->glTexImage3DEXT(GL_PROXY_TEXTURE_3D_EXT, 0, GL_RGBA, 
                               64,64,64,0,
                               GL_RGBA, GL_UNSIGNED_BYTE,
                               NULL);
  }
}
#endif
else { // Plain OpenGL 1.1
  // Implement a proper fallback or error handling.
}
